//----------------------------------------------------------------------------------- 
// <auto-generated>                                                                   
//     This code was generated via Freql.Tools (https://github.com/mc738/Freql).      
//                                                                                    
//     Manual changes to this file may cause unexpected behavior in your application. 
//     Manual changes to this file will be overwritten if the code is regenerated.    
// </auto-generated>                                                                  
//----------------------------------------------------------------------------------- 

namespace FunkyPM.V1.Store.SQLite.Persistence

open System
open System.Text.Json.Serialization
open Freql.Core.Types
open Freql.Sqlite

module private Utils =

    open System.Text.RegularExpressions

    let updateCheckIfExists (update: bool) (name: string) (value: string) =
        match update with
        | false -> value
        | true ->
            let regex = Regex($"CREATE {name}")

            regex.Replace(value, $"CREATE {name} IF NOT EXISTS", 1)

/// <summary>
/// Records representing database bindings for `records`.
/// </summary>
/// <remarks>
/// This record was generated via Freql.Tools on 03/07/2025 23:50:19
/// </remarks>
[<RequireQualifiedAccess>]
module Records =
    /// <summary>
    /// A record representing a row in the table `cfg__pipeline_version_steps`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgPipelineVersionSteps =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineVersionId")>] PipelineVersionId: string
          [<JsonPropertyName("stepOrder")>] StepOrder: int
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("stepConfigurationBlob")>] StepConfigurationBlob: BlobField
          [<JsonPropertyName("stepConfigurationHash")>] StepConfigurationHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              PipelineVersionId = String.Empty
              StepOrder = 0
              Name = String.Empty
              StepConfigurationBlob = BlobField.Empty()
              StepConfigurationHash = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__pipeline_version_steps"
(
    id                      TEXT    not null
        constraint pipeline_version_steps_pk
            primary key,
    pipeline_version_id     TEXT    not null
        constraint pipeline_version_steps_pipeline_versions_id_fk
            references "cfg__pipeline_versions",
    step_order              integer not null,
    name                    TEXT    not null,
    step_configuration_blob BLOB    not null,
    step_configuration_hash TEXT    not null,
    created_on              text    not null,
    active                  integer not null,
    constraint pipeline_version_steps_uk
        unique (pipeline_version_id, step_order)
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__pipeline_version_steps.`id`,
              cfg__pipeline_version_steps.`pipeline_version_id`,
              cfg__pipeline_version_steps.`step_order`,
              cfg__pipeline_version_steps.`name`,
              cfg__pipeline_version_steps.`step_configuration_blob`,
              cfg__pipeline_version_steps.`step_configuration_hash`,
              cfg__pipeline_version_steps.`created_on`,
              cfg__pipeline_version_steps.`active`
        FROM cfg__pipeline_version_steps
        """
    
        static member TableName() = "cfg__pipeline_version_steps"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgPipelineVersionSteps.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgPipelineVersionSteps.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgPipelineVersionSteps.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg__pipeline_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgPipelineVersions =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineId")>] PipelineId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("configurationBlob")>] ConfigurationBlob: BlobField
          [<JsonPropertyName("configurationBlobHash")>] ConfigurationBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              PipelineId = String.Empty
              Version = 0
              ConfigurationBlob = BlobField.Empty()
              ConfigurationBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__pipeline_versions"
(
    id                      TEXT    not null
        constraint pipeline_versions_pk
            primary key,
    pipeline_id             TEXT    not null
        constraint pipeline_versions_pipelines_id_fk
            references "cfg__pipelines",
    version                 integer not null,
    configuration_blob      BLOB    not null,
    configuration_blob_hash TEXT    not null,
    created_on              TEXT    not null,
    active                  integer not null,
    constraint pipeline_versions_uk_2
        unique (pipeline_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__pipeline_versions.`id`,
              cfg__pipeline_versions.`pipeline_id`,
              cfg__pipeline_versions.`version`,
              cfg__pipeline_versions.`configuration_blob`,
              cfg__pipeline_versions.`configuration_blob_hash`,
              cfg__pipeline_versions.`created_on`,
              cfg__pipeline_versions.`active`
        FROM cfg__pipeline_versions
        """
    
        static member TableName() = "cfg__pipeline_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgPipelineVersions.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgPipelineVersions.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgPipelineVersions.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg__pipelines`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgPipelines =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("userGroupId")>] UserGroupId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              UserGroupId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__pipelines"
(
    id            text    not null
        constraint pipelines_pk
            primary key,
    user_group_id TEXT    not null
        constraint pipelines_user_groups_id_fk
            references "cfg__user_groups",
    name          text    not null,
    created_on    TEXT    not null,
    active        integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__pipelines.`id`,
              cfg__pipelines.`user_group_id`,
              cfg__pipelines.`name`,
              cfg__pipelines.`created_on`,
              cfg__pipelines.`active`
        FROM cfg__pipelines
        """
    
        static member TableName() = "cfg__pipelines"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgPipelines.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgPipelines.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgPipelines.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg__user_groups`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgUserGroups =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__user_groups"
(
    id         TEXT    not null
        constraint user_groups_pk
            primary key,
    name       text    not null,
    created_on integer not null,
    active     integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__user_groups.`id`,
              cfg__user_groups.`name`,
              cfg__user_groups.`created_on`,
              cfg__user_groups.`active`
        FROM cfg__user_groups
        """
    
        static member TableName() = "cfg__user_groups"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgUserGroups.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgUserGroups.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgUserGroups.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg__users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgUsers =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__users"
(
    id   text not null
        constraint users_pk
            primary key,
    name TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__users.`id`,
              cfg__users.`name`
        FROM cfg__users
        """
    
        static member TableName() = "cfg__users"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgUsers.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgUsers.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgUsers.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgClassifications =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string option
          [<JsonPropertyName("parentClassification")>] ParentClassification: string option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Description = None
              ParentClassification = None
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE cfg_classifications
(
    id                    TEXT not null
        constraint cfg_classifications_pk
            primary key,
    name                  TEXT not null,
    description           text,
    parent_classification TEXT
        constraint cfg_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    created_on            TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg_classifications.`id`,
              cfg_classifications.`name`,
              cfg_classifications.`description`,
              cfg_classifications.`parent_classification`,
              cfg_classifications.`created_on`
        FROM cfg_classifications
        """
    
        static member TableName() = "cfg_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgClassifications.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgClassifications.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgClassifications.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg_file_types`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgFileTypes =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("extension")>] Extension: string
          [<JsonPropertyName("contentType")>] ContentType: string }
    
        static member Blank() =
            { Id = None
              Name = String.Empty
              Description = String.Empty
              Extension = String.Empty
              ContentType = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE cfg_file_types
(
    id           TEXT
        constraint cfg_file_types_pk
            primary key,
    name         TEXT not null,
    description  TEXT not null,
    extension    TEXT not null,
    content_type TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg_file_types.`id`,
              cfg_file_types.`name`,
              cfg_file_types.`description`,
              cfg_file_types.`extension`,
              cfg_file_types.`content_type`
        FROM cfg_file_types
        """
    
        static member TableName() = "cfg_file_types"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgFileTypes.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgFileTypes.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgFileTypes.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgMetadata =
        { [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE cfg_metadata
(
    item_key     TEXT not null
        constraint cfg_metadata_pk
            primary key,
    item_value   TEXT not null,
    last_updated TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg_metadata.`item_key`,
              cfg_metadata.`item_value`,
              cfg_metadata.`last_updated`
        FROM cfg_metadata
        """
    
        static member TableName() = "cfg_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CfgTags =
        { [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg_tags"
(
    tag TEXT not null
        constraint cfg_tag_pk
            primary key
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg_tags.`tag`
        FROM cfg_tags
        """
    
        static member TableName() = "cfg_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CfgTags.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CfgTags.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CfgTags.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_artifact_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunArtifactClassifications =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("classificationId")>] ClassificationId: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ClassificationId = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_artifact_classifications"
(
    artifact_id       TEXT not null
        constraint core_pipeline_run_artifact_classifications_core__pipeline_run_artifacts_id_fk
            references core__pipeline_run_artifacts,
    classification_id TEXT not null
        constraint core_pipeline_run_artifact_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    last_updated      TEXT not null,
    constraint core_pipeline_run_artifact_classifications_pk
        primary key (artifact_id, artifact_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_artifact_classifications.`artifact_id`,
              core__pipeline_run_artifact_classifications.`classification_id`,
              core__pipeline_run_artifact_classifications.`last_updated`
        FROM core__pipeline_run_artifact_classifications
        """
    
        static member TableName() = "core__pipeline_run_artifact_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunArtifactClassifications.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunArtifactClassifications.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunArtifactClassifications.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunArtifactMetadata =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_artifact_metadata
(
    artifact_id  TEXT not null
        constraint core__pipeline_run_artifact_metadata_core__pipeline_run_artifacts_id_fk
            references core__pipeline_run_artifacts,
    item_key     TEXT not null,
    item_value   TEXT not null,
    last_updated TEXT not null,
    constraint core__pipeline_run_artifact_metadata_pk
        primary key (artifact_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_artifact_metadata.`artifact_id`,
              core__pipeline_run_artifact_metadata.`item_key`,
              core__pipeline_run_artifact_metadata.`item_value`,
              core__pipeline_run_artifact_metadata.`last_updated`
        FROM core__pipeline_run_artifact_metadata
        """
    
        static member TableName() = "core__pipeline_run_artifact_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunArtifactMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunArtifactMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunArtifactMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_artifact_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunArtifactTags =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("tag")>] Tag: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              Tag = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_artifact_tags
(
    artifact_id  TEXT not null
        constraint core__pipeline_run_artifact_tags_store__artifacts_id_fk
            references store__artifacts,
    tag          TEXT not null
        constraint core__pipeline_run_artifact_tags_cfg_tags_tag_fk
            references cfg_tags,
    last_updated TEXT not null,
    constraint core__pipeline_run_artifact_tags_pk
        primary key (artifact_id, artifact_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_artifact_tags.`artifact_id`,
              core__pipeline_run_artifact_tags.`tag`,
              core__pipeline_run_artifact_tags.`last_updated`
        FROM core__pipeline_run_artifact_tags
        """
    
        static member TableName() = "core__pipeline_run_artifact_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunArtifactTags.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunArtifactTags.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunArtifactTags.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunArtifacts =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("artifactBlob")>] ArtifactBlob: BlobField
          [<JsonPropertyName("artifactHash")>] ArtifactHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime option
          [<JsonPropertyName("fileType")>] FileType: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineRunId = String.Empty
              Name = String.Empty
              ArtifactBlob = BlobField.Empty()
              ArtifactHash = String.Empty
              CreatedOn = None
              FileType = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_artifacts"
(
    id              TEXT not null
        constraint core__pipeline_run_artifacts_pk
            primary key,
    pipeline_run_id TEXT not null
        constraint core__pipeline_run_artifacts_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    name            TEXT not null,
    artifact_blob   BLOB not null,
    artifact_hash   TEXT not null,
    created_on      TEXT,
    file_type       TEXT not null
        constraint core__pipeline_run_artifacts_cfg_file_types_id_fk
            references cfg_file_types
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_artifacts.`id`,
              core__pipeline_run_artifacts.`pipeline_run_id`,
              core__pipeline_run_artifacts.`name`,
              core__pipeline_run_artifacts.`artifact_blob`,
              core__pipeline_run_artifacts.`artifact_hash`,
              core__pipeline_run_artifacts.`created_on`,
              core__pipeline_run_artifacts.`file_type`
        FROM core__pipeline_run_artifacts
        """
    
        static member TableName() = "core__pipeline_run_artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunArtifacts.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunArtifacts.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunArtifacts.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_data_store`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunDataStore =
        { [<JsonPropertyName("piplineRunId")>] PiplineRunId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValueBlob")>] ItemValueBlob: BlobField
          [<JsonPropertyName("itemValueHash")>] ItemValueHash: int64
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PiplineRunId = String.Empty
              ItemKey = String.Empty
              ItemValueBlob = BlobField.Empty()
              ItemValueHash = 0L
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_data_store"
(
    pipline_run_id  TEXT    not null
        constraint core__pipeline_run_data_store_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    item_key        TEXT    not null,
    item_value_blob BLOB    not null,
    item_value_hash integer not null,
    last_updated    TEXT    not null,
    constraint core__pipeline_run_data_store_pk
        primary key (pipline_run_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_data_store.`pipline_run_id`,
              core__pipeline_run_data_store.`item_key`,
              core__pipeline_run_data_store.`item_value_blob`,
              core__pipeline_run_data_store.`item_value_hash`,
              core__pipeline_run_data_store.`last_updated`
        FROM core__pipeline_run_data_store
        """
    
        static member TableName() = "core__pipeline_run_data_store"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunDataStore.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunDataStore.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunDataStore.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_key_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunKeyValues =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string option
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PipelineRunId = None
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_key_values"
(
    pipeline_run_id TEXT
        constraint pipeline_run_key_values_pipeline_runs_id_fk
            references "core__pipeline_runs",
    item_key        TEXT not null,
    item_value      text not null,
    last_updated    TEXT not null,
    constraint pipeline_run_key_values_pk
        primary key (pipeline_run_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_key_values.`pipeline_run_id`,
              core__pipeline_run_key_values.`item_key`,
              core__pipeline_run_key_values.`item_value`,
              core__pipeline_run_key_values.`last_updated`
        FROM core__pipeline_run_key_values
        """
    
        static member TableName() = "core__pipeline_run_key_values"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunKeyValues.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunKeyValues.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunKeyValues.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_logs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunLogs =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: int64
          [<JsonPropertyName("itemDate")>] ItemDate: string
          [<JsonPropertyName("level")>] Level: string
          [<JsonPropertyName("scope")>] Scope: string
          [<JsonPropertyName("message")>] Message: string }
    
        static member Blank() =
            { PipelineRunId = 0L
              ItemDate = String.Empty
              Level = String.Empty
              Scope = String.Empty
              Message = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_logs"
(
    pipeline_run_id integer not null
        constraint pipeline_run_logs_pipeline_runs_id_fk
            references "core__pipeline_runs",
    item_date       text    not null,
    level           TEXT    not null,
    scope           TEXT    not null,
    message         TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_logs.`pipeline_run_id`,
              core__pipeline_run_logs.`item_date`,
              core__pipeline_run_logs.`level`,
              core__pipeline_run_logs.`scope`,
              core__pipeline_run_logs.`message`
        FROM core__pipeline_run_logs
        """
    
        static member TableName() = "core__pipeline_run_logs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunLogs.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunLogs.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunLogs.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_paths`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunPaths =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("path")>] Path: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PipelineRunId = String.Empty
              Id = String.Empty
              Path = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_paths
(
    pipeline_run_id text not null
        constraint core__pipeline_run_paths_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    id              TEXT not null,
    path            TEXT not null,
    last_updated    TEXT not null,
    constraint core__pipeline_run_paths_pk
        primary key (id, pipeline_run_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_paths.`pipeline_run_id`,
              core__pipeline_run_paths.`id`,
              core__pipeline_run_paths.`path`,
              core__pipeline_run_paths.`last_updated`
        FROM core__pipeline_run_paths
        """
    
        static member TableName() = "core__pipeline_run_paths"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunPaths.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunPaths.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunPaths.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_resource_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunResourceClassifications =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("classificationId")>] ClassificationId: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              ClassificationId = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_resource_classifications
(
    resource_id       TEXT not null
        constraint core_pipeline_run_resource_classifications_core__pipeline_run_resources_id_fk
            references core__pipeline_run_resources,
    classification_id TEXT not null
        constraint core_pipeline_run_resource_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    last_updated      TEXT not null,
    constraint core_pipeline_run_resource_classifications_pk
        primary key (resource_id, resource_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_resource_classifications.`resource_id`,
              core__pipeline_run_resource_classifications.`classification_id`,
              core__pipeline_run_resource_classifications.`last_updated`
        FROM core__pipeline_run_resource_classifications
        """
    
        static member TableName() = "core__pipeline_run_resource_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunResourceClassifications.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunResourceClassifications.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunResourceClassifications.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_resource_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunResourceMetadata =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_resource_metadata
(
    resource_id  TEXT not null
        constraint core__pipeline_run_resource_metadata_core__pipeline_run_resources_id_fk
            references core__pipeline_run_resources,
    item_key     TEXT not null,
    item_value   TEXT not null,
    last_updated TEXT not null,
    constraint core__pipeline_run_resource_metadata_pk
        primary key (resource_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_resource_metadata.`resource_id`,
              core__pipeline_run_resource_metadata.`item_key`,
              core__pipeline_run_resource_metadata.`item_value`,
              core__pipeline_run_resource_metadata.`last_updated`
        FROM core__pipeline_run_resource_metadata
        """
    
        static member TableName() = "core__pipeline_run_resource_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunResourceMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunResourceMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunResourceMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_resource_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunResourceTags =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("tag")>] Tag: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              Tag = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_resource_tags
(
    resource_id  TEXT not null
        constraint core__pipeline_run_resource_tags_store__resources_id_fk
            references store__resources,
    tag          TEXT not null
        constraint core__pipeline_run_resource_tags_cfg_tags_tag_fk
            references cfg_tags,
    last_updated TEXT not null,
    constraint core__pipeline_run_resource_tags_pk
        primary key (resource_id, resource_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_resource_tags.`resource_id`,
              core__pipeline_run_resource_tags.`tag`,
              core__pipeline_run_resource_tags.`last_updated`
        FROM core__pipeline_run_resource_tags
        """
    
        static member TableName() = "core__pipeline_run_resource_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunResourceTags.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunResourceTags.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunResourceTags.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunResources =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("fileType")>] FileType: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineRunId = String.Empty
              Name = String.Empty
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              CreatedOn = DateTime.UtcNow
              FileType = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_resources"
(
    id              TEXT not null
        constraint core__pipeline_run_resources_pk
            primary key,
    pipeline_run_id TEXT not null
        constraint core__pipeline_run_resources_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    name            TEXT not null,
    resource_blob   blob not null,
    resource_hash   TEXT not null,
    created_on      TEXT not null,
    file_type       TEXT not null
        constraint core__pipeline_run_resources_cfg_file_types_id_fk
            references cfg_file_types
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_resources.`id`,
              core__pipeline_run_resources.`pipeline_run_id`,
              core__pipeline_run_resources.`name`,
              core__pipeline_run_resources.`resource_blob`,
              core__pipeline_run_resources.`resource_hash`,
              core__pipeline_run_resources.`created_on`,
              core__pipeline_run_resources.`file_type`
        FROM core__pipeline_run_resources
        """
    
        static member TableName() = "core__pipeline_run_resources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunResources.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunResources.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunResources.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunResults =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string option
          [<JsonPropertyName("result")>] Result: string option
          [<JsonPropertyName("startedOn")>] StartedOn: string option
          [<JsonPropertyName("completedOn")>] CompletedOn: string option
          [<JsonPropertyName("resultsBlob")>] ResultsBlob: string option }
    
        static member Blank() =
            { PipelineRunId = None
              Result = None
              StartedOn = None
              CompletedOn = None
              ResultsBlob = None }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_results
(
    pipeline_run_id TEXT
        constraint core__pipeline_run_results_pk
            primary key
        constraint core__pipeline_run_results_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    result          TEXT,
    started_on      TEXT,
    completed_on    TEXT,
    results_blob    TEXT
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_results.`pipeline_run_id`,
              core__pipeline_run_results.`result`,
              core__pipeline_run_results.`started_on`,
              core__pipeline_run_results.`completed_on`,
              core__pipeline_run_results.`results_blob`
        FROM core__pipeline_run_results
        """
    
        static member TableName() = "core__pipeline_run_results"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunResults.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunResults.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunResults.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_step_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRunStepResults =
        { [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("stepId")>] StepId: string
          [<JsonPropertyName("stepOrder")>] StepOrder: int
          [<JsonPropertyName("result")>] Result: string
          [<JsonPropertyName("message")>] Message: string
          [<JsonPropertyName("startedAt")>] StartedAt: string
          [<JsonPropertyName("completedAt")>] CompletedAt: int64 option
          [<JsonPropertyName("timeElapsed")>] TimeElapsed: int64
          [<JsonPropertyName("resultsBlob")>] ResultsBlob: BlobField }
    
        static member Blank() =
            { RunId = String.Empty
              StepId = String.Empty
              StepOrder = 0
              Result = String.Empty
              Message = String.Empty
              StartedAt = String.Empty
              CompletedAt = None
              TimeElapsed = 0L
              ResultsBlob = BlobField.Empty() }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_step_results
(
    run_id       TEXT    not null
        constraint core__pipeline_run_step_results_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    step_id      TEXT    not null
        constraint core__pipeline_run_step_results_cfg__pipeline_version_steps_id_fk
            references cfg__pipeline_version_steps,
    step_order   TEXT    not null,
    result       TEXT    not null,
    message      TEXT    not null,
    started_at   text    not null,
    completed_at integer,
    time_elapsed integer not null,
    results_blob BLOB    not null,
    constraint core__pipeline_run_step_results_pk
        primary key (run_id, step_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_step_results.`run_id`,
              core__pipeline_run_step_results.`step_id`,
              core__pipeline_run_step_results.`step_order`,
              core__pipeline_run_step_results.`result`,
              core__pipeline_run_step_results.`message`,
              core__pipeline_run_step_results.`started_at`,
              core__pipeline_run_step_results.`completed_at`,
              core__pipeline_run_step_results.`time_elapsed`,
              core__pipeline_run_step_results.`results_blob`
        FROM core__pipeline_run_step_results
        """
    
        static member TableName() = "core__pipeline_run_step_results"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunStepResults.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunStepResults.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunStepResults.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type CorePipelineRuns =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineVersionId")>] PipelineVersionId: string
          [<JsonPropertyName("startedOn")>] StartedOn: string
          [<JsonPropertyName("startedBy")>] StartedBy: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineVersionId = String.Empty
              StartedOn = String.Empty
              StartedBy = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_runs"
(
    id                  text not null
        constraint pipeline_runs_pk
            primary key,
    pipeline_version_id text not null
        constraint pipeline_runs_pipeline_versions_id_fk
            references "cfg__pipeline_versions",
    started_on          TEXT not null,
    started_by          TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_runs.`id`,
              core__pipeline_runs.`pipeline_version_id`,
              core__pipeline_runs.`started_on`,
              core__pipeline_runs.`started_by`
        FROM core__pipeline_runs
        """
    
        static member TableName() = "core__pipeline_runs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRuns.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRuns.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRuns.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifact_version_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreArtifactVersionClassifications =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string option
          [<JsonPropertyName("classification")>] Classification: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = None
              Classification = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__artifact_version_classifications
(
    artifact_id    TEXT
        constraint store__artifact_version_classifications_store__artifact_versions_artifact_id_fk
            references store__artifact_versions (artifact_id),
    classification TEXT not null
        constraint store__artifact_version_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    last_updated   TEXT not null,
    constraint store__artifact_version_classifications_pk
        primary key (artifact_id, classification)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifact_version_classifications.`artifact_id`,
              store__artifact_version_classifications.`classification`,
              store__artifact_version_classifications.`last_updated`
        FROM store__artifact_version_classifications
        """
    
        static member TableName() = "store__artifact_version_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreArtifactVersionClassifications.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreArtifactVersionClassifications.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreArtifactVersionClassifications.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifact_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreArtifactVersionMetadata =
        { [<JsonPropertyName("artifactVersionId")>] ArtifactVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__artifact_version_metadata
(
    artifact_version_id TEXT not null
        constraint store__artifact_version_metadata_store__artifact_versions_created_on_fk
            references store__artifact_versions (artifact_id),
    item_key            TEXT not null,
    item_value          TEXT not null,
    last_updated        TEXT not null,
    constraint store__artifact_version_metadata_pk
        primary key (artifact_version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifact_version_metadata.`artifact_version_id`,
              store__artifact_version_metadata.`item_key`,
              store__artifact_version_metadata.`item_value`,
              store__artifact_version_metadata.`last_updated`
        FROM store__artifact_version_metadata
        """
    
        static member TableName() = "store__artifact_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreArtifactVersionMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreArtifactVersionMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreArtifactVersionMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifact_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreArtifactVersionTags =
        { [<JsonPropertyName("artifactVersionId")>] ArtifactVersionId: string option
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ArtifactVersionId = None
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE store__artifact_version_tags
(
    artifact_version_id TEXT
        constraint store__artifact_version_tags_store__artifact_versions_id_fk
            references store__artifact_versions,
    tag                 TEXT not null
        constraint store__artifact_version_tags_cfg_tag_tag_fk
            references cfg_tags,
    constraint store__artifact_version_tags_pk
        primary key (artifact_version_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifact_version_tags.`artifact_version_id`,
              store__artifact_version_tags.`tag`
        FROM store__artifact_version_tags
        """
    
        static member TableName() = "store__artifact_version_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreArtifactVersionTags.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreArtifactVersionTags.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreArtifactVersionTags.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifact_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreArtifactVersions =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool
          [<JsonPropertyName("hidden")>] Hidden: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ArtifactId = String.Empty
              Version = 0
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true
              Hidden = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE "store__artifact_versions"
(
    id            TEXT    not null
        constraint store__artifact_versions_pk
            primary key,
    artifact_id   TEXT    not null
        constraint store__artifact_versions_store__artifact_id_fk
            references store__artifacts,
    version       integer not null,
    resource_blob BLOB    not null,
    resource_hash TEXT    not null,
    file_type     TEXT    not null
        constraint store__artifact_versions_cfg_file_types_id_fk
            references cfg_file_types,
    created_on    TEXT    not null,
    active        integer not null,
    hidden        integer not null,
    constraint store__resource_versions_uk
        unique (artifact_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifact_versions.`id`,
              store__artifact_versions.`artifact_id`,
              store__artifact_versions.`version`,
              store__artifact_versions.`resource_blob`,
              store__artifact_versions.`resource_hash`,
              store__artifact_versions.`file_type`,
              store__artifact_versions.`created_on`,
              store__artifact_versions.`active`,
              store__artifact_versions.`hidden`
        FROM store__artifact_versions
        """
    
        static member TableName() = "store__artifact_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreArtifactVersions.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreArtifactVersions.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreArtifactVersions.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreArtifacts =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__artifacts
(
    id         TEXT not null
        constraint store__artifacts_pk
            primary key,
    created_on TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifacts.`id`,
              store__artifacts.`created_on`
        FROM store__artifacts
        """
    
        static member TableName() = "store__artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreArtifacts.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreArtifacts.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreArtifacts.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__key_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreKeyValues =
        { [<JsonPropertyName("itemKey")>] ItemKey: string option
          [<JsonPropertyName("itemValue")>] ItemValue: string option
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ItemKey = None
              ItemValue = None
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__key_values
(
    item_key     TEXT
        constraint store__key_values_pk
            primary key,
    item_value   TEXT,
    last_updated TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              store__key_values.`item_key`,
              store__key_values.`item_value`,
              store__key_values.`last_updated`
        FROM store__key_values
        """
    
        static member TableName() = "store__key_values"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreKeyValues.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreKeyValues.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreKeyValues.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resource_version_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreResourceVersionClassifications =
        { [<JsonPropertyName("resourceId")>] ResourceId: string option
          [<JsonPropertyName("classification")>] Classification: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = None
              Classification = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__resource_version_classifications
(
    resource_id    TEXT
        constraint store__resource_version_classifications_store__resource_versions_resource_id_fk
            references store__resource_versions (resource_id),
    classification TEXT not null
        constraint store__resource_version_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    last_updated   TEXT not null,
    constraint store__resource_version_classifications_pk
        primary key (resource_id, classification)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resource_version_classifications.`resource_id`,
              store__resource_version_classifications.`classification`,
              store__resource_version_classifications.`last_updated`
        FROM store__resource_version_classifications
        """
    
        static member TableName() = "store__resource_version_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreResourceVersionClassifications.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreResourceVersionClassifications.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreResourceVersionClassifications.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resource_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreResourceVersionMetadata =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "store__resource_version_metadata"
(
    resource_version_id TEXT not null
        constraint store__resource_version_metadata_store__resource_versions_id_fk
            references store__resource_versions,
    item_key            TEXT not null,
    item_value          TEXT not null,
    last_updated        TEXT not null,
    constraint store__resource_version_metadata_pk
        primary key (resource_version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resource_version_metadata.`resource_version_id`,
              store__resource_version_metadata.`item_key`,
              store__resource_version_metadata.`item_value`,
              store__resource_version_metadata.`last_updated`
        FROM store__resource_version_metadata
        """
    
        static member TableName() = "store__resource_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreResourceVersionMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreResourceVersionMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreResourceVersionMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resource_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreResourceVersionTags =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string option
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ResourceVersionId = None
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE store__resource_version_tags
(
    resource_version_id TEXT
        constraint store__resource_version_tags_store__resource_versions_id_fk
            references store__resource_versions,
    tag                 TEXT not null
        constraint store__resource_version_tags_cfg_tag_tag_fk
            references "cfg_tags",
    constraint store__resource_version_tags_pk
        primary key (resource_version_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resource_version_tags.`resource_version_id`,
              store__resource_version_tags.`tag`
        FROM store__resource_version_tags
        """
    
        static member TableName() = "store__resource_version_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreResourceVersionTags.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreResourceVersionTags.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreResourceVersionTags.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resource_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreResourceVersions =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool
          [<JsonPropertyName("hidden")>] Hidden: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ResourceId = String.Empty
              Version = 0
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true
              Hidden = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE "store__resource_versions"
(
    id            TEXT    not null
        constraint store__resource_versions_pk
            primary key,
    resource_id   TEXT    not null
        constraint store__resource_versions_store__resources_id_fk
            references store__resources,
    version       integer not null,
    resource_blob BLOB    not null,
    resource_hash TEXT    not null,
    file_type     TEXT    not null
        constraint store__resource_versions_cfg_file_types_id_fk
            references cfg_file_types,
    created_on    TEXT    not null,
    active        integer not null,
    hidden        integer not null,
    constraint store__resource_versions_uk
        unique (resource_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resource_versions.`id`,
              store__resource_versions.`resource_id`,
              store__resource_versions.`version`,
              store__resource_versions.`resource_blob`,
              store__resource_versions.`resource_hash`,
              store__resource_versions.`file_type`,
              store__resource_versions.`created_on`,
              store__resource_versions.`active`,
              store__resource_versions.`hidden`
        FROM store__resource_versions
        """
    
        static member TableName() = "store__resource_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreResourceVersions.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreResourceVersions.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreResourceVersions.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type StoreResources =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__resources
(
    id         TEXT not null
        constraint store__resources_pk
            primary key,
    created_on TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resources.`id`,
              store__resources.`created_on`
        FROM store__resources
        """
    
        static member TableName() = "store__resources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ StoreResources.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  StoreResources.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  StoreResources.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
/// <remarks>
/// This record was generated via Freql.Tools on 03/07/2025 23:50:19
/// </remarks>
[<RequireQualifiedAccess>]
module Parameters =
    /// <summary>
    /// A record representing a new row in the table `cfg__pipeline_version_steps`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgPipelineVersionSteps =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineVersionId")>] PipelineVersionId: string
          [<JsonPropertyName("stepOrder")>] StepOrder: int
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("stepConfigurationBlob")>] StepConfigurationBlob: BlobField
          [<JsonPropertyName("stepConfigurationHash")>] StepConfigurationHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              PipelineVersionId = String.Empty
              StepOrder = 0
              Name = String.Empty
              StepConfigurationBlob = BlobField.Empty()
              StepConfigurationHash = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `cfg__pipeline_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgPipelineVersions =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineId")>] PipelineId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("configurationBlob")>] ConfigurationBlob: BlobField
          [<JsonPropertyName("configurationBlobHash")>] ConfigurationBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              PipelineId = String.Empty
              Version = 0
              ConfigurationBlob = BlobField.Empty()
              ConfigurationBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `cfg__pipelines`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgPipelines =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("userGroupId")>] UserGroupId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              UserGroupId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `cfg__user_groups`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgUserGroups =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `cfg__users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgUsers =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `cfg_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgClassifications =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string option
          [<JsonPropertyName("parentClassification")>] ParentClassification: string option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Description = None
              ParentClassification = None
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `cfg_file_types`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgFileTypes =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("extension")>] Extension: string
          [<JsonPropertyName("contentType")>] ContentType: string }
    
        static member Blank() =
            { Id = None
              Name = String.Empty
              Description = String.Empty
              Extension = String.Empty
              ContentType = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `cfg_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgMetadata =
        { [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `cfg_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCfgTags =
        { [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_artifact_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunArtifactClassifications =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("classificationId")>] ClassificationId: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ClassificationId = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunArtifactMetadata =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_artifact_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunArtifactTags =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("tag")>] Tag: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              Tag = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunArtifacts =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("artifactBlob")>] ArtifactBlob: BlobField
          [<JsonPropertyName("artifactHash")>] ArtifactHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime option
          [<JsonPropertyName("fileType")>] FileType: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineRunId = String.Empty
              Name = String.Empty
              ArtifactBlob = BlobField.Empty()
              ArtifactHash = String.Empty
              CreatedOn = None
              FileType = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_data_store`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunDataStore =
        { [<JsonPropertyName("piplineRunId")>] PiplineRunId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValueBlob")>] ItemValueBlob: BlobField
          [<JsonPropertyName("itemValueHash")>] ItemValueHash: int64
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PiplineRunId = String.Empty
              ItemKey = String.Empty
              ItemValueBlob = BlobField.Empty()
              ItemValueHash = 0L
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_key_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunKeyValues =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string option
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PipelineRunId = None
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_logs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunLogs =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: int64
          [<JsonPropertyName("itemDate")>] ItemDate: string
          [<JsonPropertyName("level")>] Level: string
          [<JsonPropertyName("scope")>] Scope: string
          [<JsonPropertyName("message")>] Message: string }
    
        static member Blank() =
            { PipelineRunId = 0L
              ItemDate = String.Empty
              Level = String.Empty
              Scope = String.Empty
              Message = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_paths`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunPaths =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("path")>] Path: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PipelineRunId = String.Empty
              Id = String.Empty
              Path = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_resource_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunResourceClassifications =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("classificationId")>] ClassificationId: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              ClassificationId = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_resource_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunResourceMetadata =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_resource_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunResourceTags =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("tag")>] Tag: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              Tag = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunResources =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("fileType")>] FileType: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineRunId = String.Empty
              Name = String.Empty
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              CreatedOn = DateTime.UtcNow
              FileType = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunResults =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string option
          [<JsonPropertyName("result")>] Result: string option
          [<JsonPropertyName("startedOn")>] StartedOn: string option
          [<JsonPropertyName("completedOn")>] CompletedOn: string option
          [<JsonPropertyName("resultsBlob")>] ResultsBlob: string option }
    
        static member Blank() =
            { PipelineRunId = None
              Result = None
              StartedOn = None
              CompletedOn = None
              ResultsBlob = None }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_step_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRunStepResults =
        { [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("stepId")>] StepId: string
          [<JsonPropertyName("stepOrder")>] StepOrder: int
          [<JsonPropertyName("result")>] Result: string
          [<JsonPropertyName("message")>] Message: string
          [<JsonPropertyName("startedAt")>] StartedAt: string
          [<JsonPropertyName("completedAt")>] CompletedAt: int64 option
          [<JsonPropertyName("timeElapsed")>] TimeElapsed: int64
          [<JsonPropertyName("resultsBlob")>] ResultsBlob: BlobField }
    
        static member Blank() =
            { RunId = String.Empty
              StepId = String.Empty
              StepOrder = 0
              Result = String.Empty
              Message = String.Empty
              StartedAt = String.Empty
              CompletedAt = None
              TimeElapsed = 0L
              ResultsBlob = BlobField.Empty() }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewCorePipelineRuns =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineVersionId")>] PipelineVersionId: string
          [<JsonPropertyName("startedOn")>] StartedOn: string
          [<JsonPropertyName("startedBy")>] StartedBy: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineVersionId = String.Empty
              StartedOn = String.Empty
              StartedBy = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifact_version_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreArtifactVersionClassifications =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string option
          [<JsonPropertyName("classification")>] Classification: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = None
              Classification = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifact_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreArtifactVersionMetadata =
        { [<JsonPropertyName("artifactVersionId")>] ArtifactVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifact_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreArtifactVersionTags =
        { [<JsonPropertyName("artifactVersionId")>] ArtifactVersionId: string option
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ArtifactVersionId = None
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifact_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreArtifactVersions =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool
          [<JsonPropertyName("hidden")>] Hidden: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ArtifactId = String.Empty
              Version = 0
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true
              Hidden = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreArtifacts =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__key_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreKeyValues =
        { [<JsonPropertyName("itemKey")>] ItemKey: string option
          [<JsonPropertyName("itemValue")>] ItemValue: string option
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ItemKey = None
              ItemValue = None
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__resource_version_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreResourceVersionClassifications =
        { [<JsonPropertyName("resourceId")>] ResourceId: string option
          [<JsonPropertyName("classification")>] Classification: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = None
              Classification = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__resource_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreResourceVersionMetadata =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__resource_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreResourceVersionTags =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string option
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ResourceVersionId = None
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `store__resource_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreResourceVersions =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool
          [<JsonPropertyName("hidden")>] Hidden: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ResourceId = String.Empty
              Version = 0
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true
              Hidden = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `store__resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    type NewStoreResources =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              CreatedOn = DateTime.UtcNow }
    
/// <remarks>
/// This record was generated via Freql.Tools on 03/07/2025 23:50:19
/// </remarks>
[<RequireQualifiedAccess>]
module Operations =

    let buildSql (lines: string list) = lines |> String.concat Environment.NewLine

    /// <summary>
    /// Select a `Records.CfgPipelineVersionSteps` from the table `cfg__pipeline_version_steps`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgPipelineVersionSteps&gt;` and uses Records.CfgPipelineVersionSteps.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgPipelineVersionStepsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgPipelineVersionStepsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelineVersionSteps.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgPipelineVersionSteps>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgPipelineVersionSteps&gt;` and uses Records.CfgPipelineVersionSteps.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgPipelineVersionStepsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgPipelineVersionStepsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelineVersionSteps.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgPipelineVersionSteps>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgPipelineVersionSteps` from the table `cfg__pipeline_version_steps`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgPipelineVersionSteps&gt;` and uses Records.CfgPipelineVersionSteps.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgPipelineVersionStepsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgPipelineVersionStepsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelineVersionSteps.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgPipelineVersionSteps>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgPipelineVersionSteps&gt;` and uses Records.CfgPipelineVersionSteps.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgPipelineVersionStepsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgPipelineVersionStepsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelineVersionSteps.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgPipelineVersionSteps>(sql, parameters)
    
    let insertCfgPipelineVersionSteps (context: SqliteContext) (parameters: Parameters.NewCfgPipelineVersionSteps) =
        context.Insert("cfg__pipeline_version_steps", parameters)
    
    let tryInsertCfgPipelineVersionSteps (context: SqliteContext) (parameters: Parameters.NewCfgPipelineVersionSteps) =
        context.TryInsert("cfg__pipeline_version_steps", parameters)
    
    /// <summary>
    /// Select a `Records.CfgPipelineVersions` from the table `cfg__pipeline_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgPipelineVersions&gt;` and uses Records.CfgPipelineVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgPipelineVersionsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgPipelineVersionsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelineVersions.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgPipelineVersions>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgPipelineVersions&gt;` and uses Records.CfgPipelineVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgPipelineVersionsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgPipelineVersionsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelineVersions.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgPipelineVersions>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgPipelineVersions` from the table `cfg__pipeline_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgPipelineVersions&gt;` and uses Records.CfgPipelineVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgPipelineVersionsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgPipelineVersionsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelineVersions.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgPipelineVersions>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgPipelineVersions&gt;` and uses Records.CfgPipelineVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgPipelineVersionsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgPipelineVersionsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelineVersions.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgPipelineVersions>(sql, parameters)
    
    let insertCfgPipelineVersions (context: SqliteContext) (parameters: Parameters.NewCfgPipelineVersions) =
        context.Insert("cfg__pipeline_versions", parameters)
    
    let tryInsertCfgPipelineVersions (context: SqliteContext) (parameters: Parameters.NewCfgPipelineVersions) =
        context.TryInsert("cfg__pipeline_versions", parameters)
    
    /// <summary>
    /// Select a `Records.CfgPipelines` from the table `cfg__pipelines`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgPipelines&gt;` and uses Records.CfgPipelines.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgPipelinesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgPipelinesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelines.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgPipelines>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgPipelines&gt;` and uses Records.CfgPipelines.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgPipelinesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgPipelinesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelines.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgPipelines>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgPipelines` from the table `cfg__pipelines`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgPipelines&gt;` and uses Records.CfgPipelines.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgPipelinesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgPipelinesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelines.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgPipelines>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgPipelines&gt;` and uses Records.CfgPipelines.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgPipelinesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgPipelinesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgPipelines.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgPipelines>(sql, parameters)
    
    let insertCfgPipelines (context: SqliteContext) (parameters: Parameters.NewCfgPipelines) =
        context.Insert("cfg__pipelines", parameters)
    
    let tryInsertCfgPipelines (context: SqliteContext) (parameters: Parameters.NewCfgPipelines) =
        context.TryInsert("cfg__pipelines", parameters)
    
    /// <summary>
    /// Select a `Records.CfgUserGroups` from the table `cfg__user_groups`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgUserGroups&gt;` and uses Records.CfgUserGroups.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgUserGroupsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgUserGroupsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgUserGroups.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgUserGroups>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgUserGroups&gt;` and uses Records.CfgUserGroups.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgUserGroupsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgUserGroupsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgUserGroups.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgUserGroups>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgUserGroups` from the table `cfg__user_groups`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgUserGroups&gt;` and uses Records.CfgUserGroups.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgUserGroupsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgUserGroupsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgUserGroups.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgUserGroups>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgUserGroups&gt;` and uses Records.CfgUserGroups.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgUserGroupsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgUserGroupsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgUserGroups.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgUserGroups>(sql, parameters)
    
    let insertCfgUserGroups (context: SqliteContext) (parameters: Parameters.NewCfgUserGroups) =
        context.Insert("cfg__user_groups", parameters)
    
    let tryInsertCfgUserGroups (context: SqliteContext) (parameters: Parameters.NewCfgUserGroups) =
        context.TryInsert("cfg__user_groups", parameters)
    
    /// <summary>
    /// Select a `Records.CfgUsers` from the table `cfg__users`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgUsers&gt;` and uses Records.CfgUsers.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgUsersRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgUsersRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgUsers.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgUsers>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgUsers&gt;` and uses Records.CfgUsers.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgUsersRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgUsersRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgUsers.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgUsers>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgUsers` from the table `cfg__users`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgUsers&gt;` and uses Records.CfgUsers.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgUsersRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgUsersRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgUsers.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgUsers>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgUsers&gt;` and uses Records.CfgUsers.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgUsersRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgUsersRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgUsers.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgUsers>(sql, parameters)
    
    let insertCfgUsers (context: SqliteContext) (parameters: Parameters.NewCfgUsers) =
        context.Insert("cfg__users", parameters)
    
    let tryInsertCfgUsers (context: SqliteContext) (parameters: Parameters.NewCfgUsers) =
        context.TryInsert("cfg__users", parameters)
    
    /// <summary>
    /// Select a `Records.CfgClassifications` from the table `cfg_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgClassifications&gt;` and uses Records.CfgClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgClassifications.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgClassifications&gt;` and uses Records.CfgClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgClassifications.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgClassifications>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgClassifications` from the table `cfg_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgClassifications&gt;` and uses Records.CfgClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgClassifications&gt;` and uses Records.CfgClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgClassifications>(sql, parameters)
    
    let insertCfgClassifications (context: SqliteContext) (parameters: Parameters.NewCfgClassifications) =
        context.Insert("cfg_classifications", parameters)
    
    let tryInsertCfgClassifications (context: SqliteContext) (parameters: Parameters.NewCfgClassifications) =
        context.TryInsert("cfg_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.CfgFileTypes` from the table `cfg_file_types`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgFileTypes&gt;` and uses Records.CfgFileTypes.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgFileTypesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgFileTypesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgFileTypes.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgFileTypes>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgFileTypes&gt;` and uses Records.CfgFileTypes.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgFileTypesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgFileTypesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgFileTypes.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgFileTypes>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgFileTypes` from the table `cfg_file_types`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgFileTypes&gt;` and uses Records.CfgFileTypes.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgFileTypesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgFileTypesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgFileTypes.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgFileTypes>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgFileTypes&gt;` and uses Records.CfgFileTypes.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgFileTypesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgFileTypesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgFileTypes.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgFileTypes>(sql, parameters)
    
    let insertCfgFileTypes (context: SqliteContext) (parameters: Parameters.NewCfgFileTypes) =
        context.Insert("cfg_file_types", parameters)
    
    let tryInsertCfgFileTypes (context: SqliteContext) (parameters: Parameters.NewCfgFileTypes) =
        context.TryInsert("cfg_file_types", parameters)
    
    /// <summary>
    /// Select a `Records.CfgMetadata` from the table `cfg_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgMetadata&gt;` and uses Records.CfgMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgMetadata&gt;` and uses Records.CfgMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgMetadata>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgMetadata` from the table `cfg_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgMetadata&gt;` and uses Records.CfgMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgMetadata&gt;` and uses Records.CfgMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgMetadata>(sql, parameters)
    
    let insertCfgMetadata (context: SqliteContext) (parameters: Parameters.NewCfgMetadata) =
        context.Insert("cfg_metadata", parameters)
    
    let tryInsertCfgMetadata (context: SqliteContext) (parameters: Parameters.NewCfgMetadata) =
        context.TryInsert("cfg_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.CfgTags` from the table `cfg_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CfgTags&gt;` and uses Records.CfgTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgTags.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CfgTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CfgTags&gt;` and uses Records.CfgTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCfgTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCfgTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgTags.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CfgTags>(sql, parameters)
    /// <summary>
    /// Select a `Records.CfgTags` from the table `cfg_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CfgTags&gt;` and uses Records.CfgTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgTags.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CfgTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CfgTags&gt;` and uses Records.CfgTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCfgTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCfgTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CfgTags.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CfgTags>(sql, parameters)
    
    let insertCfgTags (context: SqliteContext) (parameters: Parameters.NewCfgTags) =
        context.Insert("cfg_tags", parameters)
    
    let tryInsertCfgTags (context: SqliteContext) (parameters: Parameters.NewCfgTags) =
        context.TryInsert("cfg_tags", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunArtifactClassifications` from the table `core__pipeline_run_artifact_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunArtifactClassifications&gt;` and uses Records.CorePipelineRunArtifactClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunArtifactClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunArtifactClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactClassifications.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunArtifactClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunArtifactClassifications&gt;` and uses Records.CorePipelineRunArtifactClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunArtifactClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunArtifactClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactClassifications.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunArtifactClassifications>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunArtifactClassifications` from the table `core__pipeline_run_artifact_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunArtifactClassifications&gt;` and uses Records.CorePipelineRunArtifactClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunArtifactClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunArtifactClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunArtifactClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunArtifactClassifications&gt;` and uses Records.CorePipelineRunArtifactClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunArtifactClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunArtifactClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunArtifactClassifications>(sql, parameters)
    
    let insertCorePipelineRunArtifactClassifications (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunArtifactClassifications) =
        context.Insert("core__pipeline_run_artifact_classifications", parameters)
    
    let tryInsertCorePipelineRunArtifactClassifications (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunArtifactClassifications) =
        context.TryInsert("core__pipeline_run_artifact_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunArtifactMetadata` from the table `core__pipeline_run_artifact_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunArtifactMetadata&gt;` and uses Records.CorePipelineRunArtifactMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunArtifactMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunArtifactMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunArtifactMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunArtifactMetadata&gt;` and uses Records.CorePipelineRunArtifactMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunArtifactMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunArtifactMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunArtifactMetadata>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunArtifactMetadata` from the table `core__pipeline_run_artifact_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunArtifactMetadata&gt;` and uses Records.CorePipelineRunArtifactMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunArtifactMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunArtifactMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunArtifactMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunArtifactMetadata&gt;` and uses Records.CorePipelineRunArtifactMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunArtifactMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunArtifactMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunArtifactMetadata>(sql, parameters)
    
    let insertCorePipelineRunArtifactMetadata (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunArtifactMetadata) =
        context.Insert("core__pipeline_run_artifact_metadata", parameters)
    
    let tryInsertCorePipelineRunArtifactMetadata (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunArtifactMetadata) =
        context.TryInsert("core__pipeline_run_artifact_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunArtifactTags` from the table `core__pipeline_run_artifact_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunArtifactTags&gt;` and uses Records.CorePipelineRunArtifactTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunArtifactTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunArtifactTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactTags.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunArtifactTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunArtifactTags&gt;` and uses Records.CorePipelineRunArtifactTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunArtifactTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunArtifactTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactTags.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunArtifactTags>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunArtifactTags` from the table `core__pipeline_run_artifact_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunArtifactTags&gt;` and uses Records.CorePipelineRunArtifactTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunArtifactTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunArtifactTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactTags.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunArtifactTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunArtifactTags&gt;` and uses Records.CorePipelineRunArtifactTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunArtifactTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunArtifactTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifactTags.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunArtifactTags>(sql, parameters)
    
    let insertCorePipelineRunArtifactTags (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunArtifactTags) =
        context.Insert("core__pipeline_run_artifact_tags", parameters)
    
    let tryInsertCorePipelineRunArtifactTags (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunArtifactTags) =
        context.TryInsert("core__pipeline_run_artifact_tags", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunArtifacts` from the table `core__pipeline_run_artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunArtifacts&gt;` and uses Records.CorePipelineRunArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunArtifactsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunArtifactsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifacts.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunArtifacts>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunArtifacts&gt;` and uses Records.CorePipelineRunArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunArtifactsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunArtifactsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifacts.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunArtifacts>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunArtifacts` from the table `core__pipeline_run_artifacts`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunArtifacts&gt;` and uses Records.CorePipelineRunArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunArtifactsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunArtifactsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifacts.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunArtifacts>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunArtifacts&gt;` and uses Records.CorePipelineRunArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunArtifactsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunArtifactsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunArtifacts.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunArtifacts>(sql, parameters)
    
    let insertCorePipelineRunArtifacts (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunArtifacts) =
        context.Insert("core__pipeline_run_artifacts", parameters)
    
    let tryInsertCorePipelineRunArtifacts (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunArtifacts) =
        context.TryInsert("core__pipeline_run_artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunDataStore` from the table `core__pipeline_run_data_store`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunDataStore&gt;` and uses Records.CorePipelineRunDataStore.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunDataStoreRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunDataStoreRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunDataStore.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunDataStore>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunDataStore&gt;` and uses Records.CorePipelineRunDataStore.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunDataStoreRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunDataStoreRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunDataStore.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunDataStore>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunDataStore` from the table `core__pipeline_run_data_store`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunDataStore&gt;` and uses Records.CorePipelineRunDataStore.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunDataStoreRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunDataStoreRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunDataStore.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunDataStore>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunDataStore&gt;` and uses Records.CorePipelineRunDataStore.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunDataStoreRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunDataStoreRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunDataStore.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunDataStore>(sql, parameters)
    
    let insertCorePipelineRunDataStore (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunDataStore) =
        context.Insert("core__pipeline_run_data_store", parameters)
    
    let tryInsertCorePipelineRunDataStore (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunDataStore) =
        context.TryInsert("core__pipeline_run_data_store", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunKeyValues` from the table `core__pipeline_run_key_values`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunKeyValues&gt;` and uses Records.CorePipelineRunKeyValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunKeyValuesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunKeyValuesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunKeyValues.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunKeyValues>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunKeyValues&gt;` and uses Records.CorePipelineRunKeyValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunKeyValuesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunKeyValuesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunKeyValues.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunKeyValues>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunKeyValues` from the table `core__pipeline_run_key_values`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunKeyValues&gt;` and uses Records.CorePipelineRunKeyValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunKeyValuesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunKeyValuesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunKeyValues.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunKeyValues>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunKeyValues&gt;` and uses Records.CorePipelineRunKeyValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunKeyValuesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunKeyValuesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunKeyValues.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunKeyValues>(sql, parameters)
    
    let insertCorePipelineRunKeyValues (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunKeyValues) =
        context.Insert("core__pipeline_run_key_values", parameters)
    
    let tryInsertCorePipelineRunKeyValues (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunKeyValues) =
        context.TryInsert("core__pipeline_run_key_values", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunLogs` from the table `core__pipeline_run_logs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunLogs&gt;` and uses Records.CorePipelineRunLogs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunLogsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunLogsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunLogs.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunLogs>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunLogs&gt;` and uses Records.CorePipelineRunLogs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunLogsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunLogsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunLogs.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunLogs>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunLogs` from the table `core__pipeline_run_logs`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunLogs&gt;` and uses Records.CorePipelineRunLogs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunLogsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunLogsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunLogs.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunLogs>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunLogs&gt;` and uses Records.CorePipelineRunLogs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunLogsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunLogsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunLogs.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunLogs>(sql, parameters)
    
    let insertCorePipelineRunLogs (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunLogs) =
        context.Insert("core__pipeline_run_logs", parameters)
    
    let tryInsertCorePipelineRunLogs (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunLogs) =
        context.TryInsert("core__pipeline_run_logs", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunPaths` from the table `core__pipeline_run_paths`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunPaths&gt;` and uses Records.CorePipelineRunPaths.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunPathsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunPathsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunPaths.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunPaths>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunPaths&gt;` and uses Records.CorePipelineRunPaths.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunPathsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunPathsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunPaths.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunPaths>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunPaths` from the table `core__pipeline_run_paths`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunPaths&gt;` and uses Records.CorePipelineRunPaths.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunPathsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunPathsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunPaths.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunPaths>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunPaths&gt;` and uses Records.CorePipelineRunPaths.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunPathsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunPathsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunPaths.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunPaths>(sql, parameters)
    
    let insertCorePipelineRunPaths (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunPaths) =
        context.Insert("core__pipeline_run_paths", parameters)
    
    let tryInsertCorePipelineRunPaths (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunPaths) =
        context.TryInsert("core__pipeline_run_paths", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunResourceClassifications` from the table `core__pipeline_run_resource_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunResourceClassifications&gt;` and uses Records.CorePipelineRunResourceClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourceClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourceClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceClassifications.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunResourceClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunResourceClassifications&gt;` and uses Records.CorePipelineRunResourceClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourceClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourceClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceClassifications.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunResourceClassifications>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunResourceClassifications` from the table `core__pipeline_run_resource_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunResourceClassifications&gt;` and uses Records.CorePipelineRunResourceClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourceClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourceClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunResourceClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunResourceClassifications&gt;` and uses Records.CorePipelineRunResourceClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourceClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourceClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunResourceClassifications>(sql, parameters)
    
    let insertCorePipelineRunResourceClassifications (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResourceClassifications) =
        context.Insert("core__pipeline_run_resource_classifications", parameters)
    
    let tryInsertCorePipelineRunResourceClassifications (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResourceClassifications) =
        context.TryInsert("core__pipeline_run_resource_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunResourceMetadata` from the table `core__pipeline_run_resource_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunResourceMetadata&gt;` and uses Records.CorePipelineRunResourceMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourceMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourceMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunResourceMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunResourceMetadata&gt;` and uses Records.CorePipelineRunResourceMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourceMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourceMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunResourceMetadata>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunResourceMetadata` from the table `core__pipeline_run_resource_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunResourceMetadata&gt;` and uses Records.CorePipelineRunResourceMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourceMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourceMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunResourceMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunResourceMetadata&gt;` and uses Records.CorePipelineRunResourceMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourceMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourceMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunResourceMetadata>(sql, parameters)
    
    let insertCorePipelineRunResourceMetadata (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResourceMetadata) =
        context.Insert("core__pipeline_run_resource_metadata", parameters)
    
    let tryInsertCorePipelineRunResourceMetadata (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResourceMetadata) =
        context.TryInsert("core__pipeline_run_resource_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunResourceTags` from the table `core__pipeline_run_resource_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunResourceTags&gt;` and uses Records.CorePipelineRunResourceTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourceTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourceTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceTags.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunResourceTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunResourceTags&gt;` and uses Records.CorePipelineRunResourceTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourceTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourceTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceTags.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunResourceTags>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunResourceTags` from the table `core__pipeline_run_resource_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunResourceTags&gt;` and uses Records.CorePipelineRunResourceTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourceTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourceTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceTags.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunResourceTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunResourceTags&gt;` and uses Records.CorePipelineRunResourceTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourceTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourceTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceTags.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunResourceTags>(sql, parameters)
    
    let insertCorePipelineRunResourceTags (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResourceTags) =
        context.Insert("core__pipeline_run_resource_tags", parameters)
    
    let tryInsertCorePipelineRunResourceTags (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResourceTags) =
        context.TryInsert("core__pipeline_run_resource_tags", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunResources` from the table `core__pipeline_run_resources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunResources&gt;` and uses Records.CorePipelineRunResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourcesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourcesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResources.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunResources>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunResources&gt;` and uses Records.CorePipelineRunResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourcesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourcesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResources.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunResources>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunResources` from the table `core__pipeline_run_resources`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunResources&gt;` and uses Records.CorePipelineRunResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourcesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourcesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResources.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunResources>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunResources&gt;` and uses Records.CorePipelineRunResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourcesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourcesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResources.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunResources>(sql, parameters)
    
    let insertCorePipelineRunResources (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResources) =
        context.Insert("core__pipeline_run_resources", parameters)
    
    let tryInsertCorePipelineRunResources (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResources) =
        context.TryInsert("core__pipeline_run_resources", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunResults` from the table `core__pipeline_run_results`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunResults&gt;` and uses Records.CorePipelineRunResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResultsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResultsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResults.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunResults>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunResults&gt;` and uses Records.CorePipelineRunResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResultsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResultsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResults.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunResults>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunResults` from the table `core__pipeline_run_results`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunResults&gt;` and uses Records.CorePipelineRunResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResultsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResultsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResults.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunResults>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunResults&gt;` and uses Records.CorePipelineRunResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResultsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResultsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResults.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunResults>(sql, parameters)
    
    let insertCorePipelineRunResults (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResults) =
        context.Insert("core__pipeline_run_results", parameters)
    
    let tryInsertCorePipelineRunResults (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResults) =
        context.TryInsert("core__pipeline_run_results", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunStepResults` from the table `core__pipeline_run_step_results`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunStepResults&gt;` and uses Records.CorePipelineRunStepResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunStepResultsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunStepResultsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunStepResults.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunStepResults>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunStepResults&gt;` and uses Records.CorePipelineRunStepResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunStepResultsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunStepResultsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunStepResults.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunStepResults>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunStepResults` from the table `core__pipeline_run_step_results`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunStepResults&gt;` and uses Records.CorePipelineRunStepResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunStepResultsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunStepResultsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunStepResults.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunStepResults>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunStepResults&gt;` and uses Records.CorePipelineRunStepResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunStepResultsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunStepResultsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunStepResults.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunStepResults>(sql, parameters)
    
    let insertCorePipelineRunStepResults (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunStepResults) =
        context.Insert("core__pipeline_run_step_results", parameters)
    
    let tryInsertCorePipelineRunStepResults (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunStepResults) =
        context.TryInsert("core__pipeline_run_step_results", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRuns` from the table `core__pipeline_runs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRuns&gt;` and uses Records.CorePipelineRuns.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRuns.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRuns>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRuns&gt;` and uses Records.CorePipelineRuns.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRuns.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRuns>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRuns` from the table `core__pipeline_runs`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRuns&gt;` and uses Records.CorePipelineRuns.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRuns.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRuns>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRuns&gt;` and uses Records.CorePipelineRuns.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRuns.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRuns>(sql, parameters)
    
    let insertCorePipelineRuns (context: SqliteContext) (parameters: Parameters.NewCorePipelineRuns) =
        context.Insert("core__pipeline_runs", parameters)
    
    let tryInsertCorePipelineRuns (context: SqliteContext) (parameters: Parameters.NewCorePipelineRuns) =
        context.TryInsert("core__pipeline_runs", parameters)
    
    /// <summary>
    /// Select a `Records.StoreArtifactVersionClassifications` from the table `store__artifact_version_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreArtifactVersionClassifications&gt;` and uses Records.StoreArtifactVersionClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactVersionClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactVersionClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionClassifications.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreArtifactVersionClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreArtifactVersionClassifications&gt;` and uses Records.StoreArtifactVersionClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactVersionClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactVersionClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionClassifications.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreArtifactVersionClassifications>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreArtifactVersionClassifications` from the table `store__artifact_version_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreArtifactVersionClassifications&gt;` and uses Records.StoreArtifactVersionClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactVersionClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactVersionClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreArtifactVersionClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreArtifactVersionClassifications&gt;` and uses Records.StoreArtifactVersionClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactVersionClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactVersionClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreArtifactVersionClassifications>(sql, parameters)
    
    let insertStoreArtifactVersionClassifications (context: SqliteContext) (parameters: Parameters.NewStoreArtifactVersionClassifications) =
        context.Insert("store__artifact_version_classifications", parameters)
    
    let tryInsertStoreArtifactVersionClassifications (context: SqliteContext) (parameters: Parameters.NewStoreArtifactVersionClassifications) =
        context.TryInsert("store__artifact_version_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.StoreArtifactVersionMetadata` from the table `store__artifact_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreArtifactVersionMetadata&gt;` and uses Records.StoreArtifactVersionMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactVersionMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactVersionMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreArtifactVersionMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreArtifactVersionMetadata&gt;` and uses Records.StoreArtifactVersionMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactVersionMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactVersionMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreArtifactVersionMetadata>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreArtifactVersionMetadata` from the table `store__artifact_version_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreArtifactVersionMetadata&gt;` and uses Records.StoreArtifactVersionMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactVersionMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactVersionMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreArtifactVersionMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreArtifactVersionMetadata&gt;` and uses Records.StoreArtifactVersionMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactVersionMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactVersionMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreArtifactVersionMetadata>(sql, parameters)
    
    let insertStoreArtifactVersionMetadata (context: SqliteContext) (parameters: Parameters.NewStoreArtifactVersionMetadata) =
        context.Insert("store__artifact_version_metadata", parameters)
    
    let tryInsertStoreArtifactVersionMetadata (context: SqliteContext) (parameters: Parameters.NewStoreArtifactVersionMetadata) =
        context.TryInsert("store__artifact_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.StoreArtifactVersionTags` from the table `store__artifact_version_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreArtifactVersionTags&gt;` and uses Records.StoreArtifactVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactVersionTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactVersionTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionTags.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreArtifactVersionTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreArtifactVersionTags&gt;` and uses Records.StoreArtifactVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactVersionTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactVersionTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionTags.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreArtifactVersionTags>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreArtifactVersionTags` from the table `store__artifact_version_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreArtifactVersionTags&gt;` and uses Records.StoreArtifactVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactVersionTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactVersionTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionTags.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreArtifactVersionTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreArtifactVersionTags&gt;` and uses Records.StoreArtifactVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactVersionTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactVersionTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersionTags.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreArtifactVersionTags>(sql, parameters)
    
    let insertStoreArtifactVersionTags (context: SqliteContext) (parameters: Parameters.NewStoreArtifactVersionTags) =
        context.Insert("store__artifact_version_tags", parameters)
    
    let tryInsertStoreArtifactVersionTags (context: SqliteContext) (parameters: Parameters.NewStoreArtifactVersionTags) =
        context.TryInsert("store__artifact_version_tags", parameters)
    
    /// <summary>
    /// Select a `Records.StoreArtifactVersions` from the table `store__artifact_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreArtifactVersions&gt;` and uses Records.StoreArtifactVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactVersionsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactVersionsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersions.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreArtifactVersions>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreArtifactVersions&gt;` and uses Records.StoreArtifactVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactVersionsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactVersionsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersions.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreArtifactVersions>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreArtifactVersions` from the table `store__artifact_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreArtifactVersions&gt;` and uses Records.StoreArtifactVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactVersionsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactVersionsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersions.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreArtifactVersions>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreArtifactVersions&gt;` and uses Records.StoreArtifactVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactVersionsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactVersionsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifactVersions.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreArtifactVersions>(sql, parameters)
    
    let insertStoreArtifactVersions (context: SqliteContext) (parameters: Parameters.NewStoreArtifactVersions) =
        context.Insert("store__artifact_versions", parameters)
    
    let tryInsertStoreArtifactVersions (context: SqliteContext) (parameters: Parameters.NewStoreArtifactVersions) =
        context.TryInsert("store__artifact_versions", parameters)
    
    /// <summary>
    /// Select a `Records.StoreArtifacts` from the table `store__artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreArtifacts&gt;` and uses Records.StoreArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifacts.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreArtifacts>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreArtifacts&gt;` and uses Records.StoreArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreArtifactsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreArtifactsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifacts.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreArtifacts>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreArtifacts` from the table `store__artifacts`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreArtifacts&gt;` and uses Records.StoreArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifacts.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreArtifacts>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreArtifacts&gt;` and uses Records.StoreArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreArtifactsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreArtifactsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreArtifacts.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreArtifacts>(sql, parameters)
    
    let insertStoreArtifacts (context: SqliteContext) (parameters: Parameters.NewStoreArtifacts) =
        context.Insert("store__artifacts", parameters)
    
    let tryInsertStoreArtifacts (context: SqliteContext) (parameters: Parameters.NewStoreArtifacts) =
        context.TryInsert("store__artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.StoreKeyValues` from the table `store__key_values`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreKeyValues&gt;` and uses Records.StoreKeyValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreKeyValuesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreKeyValuesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreKeyValues.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreKeyValues>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreKeyValues&gt;` and uses Records.StoreKeyValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreKeyValuesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreKeyValuesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreKeyValues.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreKeyValues>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreKeyValues` from the table `store__key_values`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreKeyValues&gt;` and uses Records.StoreKeyValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreKeyValuesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreKeyValuesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreKeyValues.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreKeyValues>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreKeyValues&gt;` and uses Records.StoreKeyValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreKeyValuesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreKeyValuesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreKeyValues.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreKeyValues>(sql, parameters)
    
    let insertStoreKeyValues (context: SqliteContext) (parameters: Parameters.NewStoreKeyValues) =
        context.Insert("store__key_values", parameters)
    
    let tryInsertStoreKeyValues (context: SqliteContext) (parameters: Parameters.NewStoreKeyValues) =
        context.TryInsert("store__key_values", parameters)
    
    /// <summary>
    /// Select a `Records.StoreResourceVersionClassifications` from the table `store__resource_version_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreResourceVersionClassifications&gt;` and uses Records.StoreResourceVersionClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourceVersionClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourceVersionClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionClassifications.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreResourceVersionClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreResourceVersionClassifications&gt;` and uses Records.StoreResourceVersionClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourceVersionClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourceVersionClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionClassifications.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreResourceVersionClassifications>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreResourceVersionClassifications` from the table `store__resource_version_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreResourceVersionClassifications&gt;` and uses Records.StoreResourceVersionClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourceVersionClassificationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourceVersionClassificationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreResourceVersionClassifications>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreResourceVersionClassifications&gt;` and uses Records.StoreResourceVersionClassifications.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourceVersionClassificationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourceVersionClassificationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionClassifications.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreResourceVersionClassifications>(sql, parameters)
    
    let insertStoreResourceVersionClassifications (context: SqliteContext) (parameters: Parameters.NewStoreResourceVersionClassifications) =
        context.Insert("store__resource_version_classifications", parameters)
    
    let tryInsertStoreResourceVersionClassifications (context: SqliteContext) (parameters: Parameters.NewStoreResourceVersionClassifications) =
        context.TryInsert("store__resource_version_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.StoreResourceVersionMetadata` from the table `store__resource_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreResourceVersionMetadata&gt;` and uses Records.StoreResourceVersionMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourceVersionMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourceVersionMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreResourceVersionMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreResourceVersionMetadata&gt;` and uses Records.StoreResourceVersionMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourceVersionMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourceVersionMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreResourceVersionMetadata>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreResourceVersionMetadata` from the table `store__resource_version_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreResourceVersionMetadata&gt;` and uses Records.StoreResourceVersionMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourceVersionMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourceVersionMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreResourceVersionMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreResourceVersionMetadata&gt;` and uses Records.StoreResourceVersionMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourceVersionMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourceVersionMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreResourceVersionMetadata>(sql, parameters)
    
    let insertStoreResourceVersionMetadata (context: SqliteContext) (parameters: Parameters.NewStoreResourceVersionMetadata) =
        context.Insert("store__resource_version_metadata", parameters)
    
    let tryInsertStoreResourceVersionMetadata (context: SqliteContext) (parameters: Parameters.NewStoreResourceVersionMetadata) =
        context.TryInsert("store__resource_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.StoreResourceVersionTags` from the table `store__resource_version_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreResourceVersionTags&gt;` and uses Records.StoreResourceVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourceVersionTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourceVersionTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionTags.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreResourceVersionTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreResourceVersionTags&gt;` and uses Records.StoreResourceVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourceVersionTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourceVersionTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionTags.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreResourceVersionTags>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreResourceVersionTags` from the table `store__resource_version_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreResourceVersionTags&gt;` and uses Records.StoreResourceVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourceVersionTagsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourceVersionTagsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionTags.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreResourceVersionTags>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreResourceVersionTags&gt;` and uses Records.StoreResourceVersionTags.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourceVersionTagsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourceVersionTagsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersionTags.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreResourceVersionTags>(sql, parameters)
    
    let insertStoreResourceVersionTags (context: SqliteContext) (parameters: Parameters.NewStoreResourceVersionTags) =
        context.Insert("store__resource_version_tags", parameters)
    
    let tryInsertStoreResourceVersionTags (context: SqliteContext) (parameters: Parameters.NewStoreResourceVersionTags) =
        context.TryInsert("store__resource_version_tags", parameters)
    
    /// <summary>
    /// Select a `Records.StoreResourceVersions` from the table `store__resource_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreResourceVersions&gt;` and uses Records.StoreResourceVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourceVersionsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourceVersionsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersions.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreResourceVersions>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreResourceVersions&gt;` and uses Records.StoreResourceVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourceVersionsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourceVersionsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersions.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreResourceVersions>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreResourceVersions` from the table `store__resource_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreResourceVersions&gt;` and uses Records.StoreResourceVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourceVersionsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourceVersionsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersions.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreResourceVersions>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreResourceVersions&gt;` and uses Records.StoreResourceVersions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourceVersionsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourceVersionsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResourceVersions.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreResourceVersions>(sql, parameters)
    
    let insertStoreResourceVersions (context: SqliteContext) (parameters: Parameters.NewStoreResourceVersions) =
        context.Insert("store__resource_versions", parameters)
    
    let tryInsertStoreResourceVersions (context: SqliteContext) (parameters: Parameters.NewStoreResourceVersions) =
        context.TryInsert("store__resource_versions", parameters)
    
    /// <summary>
    /// Select a `Records.StoreResources` from the table `store__resources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.StoreResources&gt;` and uses Records.StoreResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourcesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourcesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResources.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.StoreResources>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.StoreResources&gt;` and uses Records.StoreResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectStoreResourcesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectStoreResourcesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResources.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.StoreResources>(sql, parameters)
    /// <summary>
    /// Select a `Records.StoreResources` from the table `store__resources`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.StoreResources&gt;` and uses Records.StoreResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourcesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourcesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResources.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.StoreResources>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.StoreResources&gt;` and uses Records.StoreResources.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 03/07/2025 23:50:19
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectStoreResourcesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectStoreResourcesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.StoreResources.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.StoreResources>(sql, parameters)
    
    let insertStoreResources (context: SqliteContext) (parameters: Parameters.NewStoreResources) =
        context.Insert("store__resources", parameters)
    
    let tryInsertStoreResources (context: SqliteContext) (parameters: Parameters.NewStoreResources) =
        context.TryInsert("store__resources", parameters)
    
[<RequireQualifiedAccess>]
module Initialization =
    let sql (checkIfExists: bool) =
        [ Records.CfgUserGroups.InitializationSql checkIfExists
          Records.CfgPipelines.InitializationSql checkIfExists
          Records.CfgPipelineVersions.InitializationSql checkIfExists
          Records.StoreResources.InitializationSql checkIfExists
          Records.CfgFileTypes.InitializationSql checkIfExists
          Records.StoreArtifacts.InitializationSql checkIfExists
          Records.CorePipelineRuns.InitializationSql checkIfExists
          Records.StoreResourceVersions.InitializationSql checkIfExists
          Records.CfgTags.InitializationSql checkIfExists
          Records.StoreArtifactVersions.InitializationSql checkIfExists
          Records.CfgPipelineVersionSteps.InitializationSql checkIfExists
          Records.CorePipelineRunResources.InitializationSql checkIfExists
          Records.CorePipelineRunArtifacts.InitializationSql checkIfExists
          Records.StoreResourceVersionTags.InitializationSql checkIfExists
          Records.StoreResourceVersionMetadata.InitializationSql checkIfExists
          Records.StoreResourceVersionClassifications.InitializationSql checkIfExists
          Records.StoreKeyValues.InitializationSql checkIfExists
          Records.StoreArtifactVersionTags.InitializationSql checkIfExists
          Records.StoreArtifactVersionMetadata.InitializationSql checkIfExists
          Records.StoreArtifactVersionClassifications.InitializationSql checkIfExists
          Records.CorePipelineRunStepResults.InitializationSql checkIfExists
          Records.CorePipelineRunResults.InitializationSql checkIfExists
          Records.CorePipelineRunResourceTags.InitializationSql checkIfExists
          Records.CorePipelineRunResourceMetadata.InitializationSql checkIfExists
          Records.CorePipelineRunResourceClassifications.InitializationSql checkIfExists
          Records.CorePipelineRunPaths.InitializationSql checkIfExists
          Records.CorePipelineRunLogs.InitializationSql checkIfExists
          Records.CorePipelineRunKeyValues.InitializationSql checkIfExists
          Records.CorePipelineRunDataStore.InitializationSql checkIfExists
          Records.CorePipelineRunArtifactTags.InitializationSql checkIfExists
          Records.CorePipelineRunArtifactMetadata.InitializationSql checkIfExists
          Records.CorePipelineRunArtifactClassifications.InitializationSql checkIfExists
          Records.CfgMetadata.InitializationSql checkIfExists
          Records.CfgUsers.InitializationSql checkIfExists ]
        |> List.concat

    let run (checkIfExists: bool) (ctx: SqliteContext) =
        sql checkIfExists |> List.iter (ctx.ExecuteSqlNonQuery >> ignore)

    let runInTransaction (checkIfExists: bool) (ctx: SqliteContext) =
        ctx.ExecuteInTransaction(fun t -> sql checkIfExists |> List.iter (t.ExecuteSqlNonQuery >> ignore))
