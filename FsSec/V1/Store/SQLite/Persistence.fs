//----------------------------------------------------------------------------------- 
// <auto-generated>                                                                   
//     This code was generated via Freql.Tools (https://github.com/mc738/Freql).      
//                                                                                    
//     Manual changes to this file may cause unexpected behavior in your application. 
//     Manual changes to this file will be overwritten if the code is regenerated.    
// </auto-generated>                                                                  
//----------------------------------------------------------------------------------- 

namespace FunkyPM.V1.Store.SQLite.Persistence

open System
open System.Text.Json.Serialization
open Freql.Core.Common
open Freql.Sqlite

module private Utils =

    open System.Text.RegularExpressions

    let updateCheckIfExists (update: bool) (name: string) (value: string) =
        match update with
        | false -> value
        | true ->
            let regex = Regex($"CREATE {name}")

            regex.Replace(value, $"CREATE {name} IF NOT EXISTS", 1)

/// <summary>
/// Records representing database bindings for `records`.
/// </summary>
/// <remarks>
/// This record was generated via Freql.Tools on 06/07/2025 17:21:44
/// </remarks>
[<RequireQualifiedAccess>]
module Records =
    /// <summary>
    /// A record representing a row in the table `cfg__pipeline_version_steps`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineVersionStep =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineVersionId")>] PipelineVersionId: string
          [<JsonPropertyName("stepOrder")>] StepOrder: int
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("stepConfigurationBlob")>] StepConfigurationBlob: BlobField
          [<JsonPropertyName("stepConfigurationHash")>] StepConfigurationHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              PipelineVersionId = String.Empty
              StepOrder = 0
              Name = String.Empty
              StepConfigurationBlob = BlobField.Empty()
              StepConfigurationHash = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__pipeline_version_steps"
(
    id                      TEXT    not null
        constraint pipeline_version_steps_pk
            primary key,
    pipeline_version_id     TEXT    not null
        constraint pipeline_version_steps_pipeline_versions_id_fk
            references "cfg__pipeline_versions",
    step_order              integer not null,
    name                    TEXT    not null,
    step_configuration_blob BLOB    not null,
    step_configuration_hash TEXT    not null,
    created_on              text    not null,
    active                  integer not null,
    constraint pipeline_version_steps_uk
        unique (pipeline_version_id, step_order)
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__pipeline_version_steps.`id`,
              cfg__pipeline_version_steps.`pipeline_version_id`,
              cfg__pipeline_version_steps.`step_order`,
              cfg__pipeline_version_steps.`name`,
              cfg__pipeline_version_steps.`step_configuration_blob`,
              cfg__pipeline_version_steps.`step_configuration_hash`,
              cfg__pipeline_version_steps.`created_on`,
              cfg__pipeline_version_steps.`active`
        FROM cfg__pipeline_version_steps
        """
    
        static member TableName() = "cfg__pipeline_version_steps"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineVersionStep.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineVersionStep.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineVersionStep.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg__pipeline_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineId")>] PipelineId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("configurationBlob")>] ConfigurationBlob: BlobField
          [<JsonPropertyName("configurationBlobHash")>] ConfigurationBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              PipelineId = String.Empty
              Version = 0
              ConfigurationBlob = BlobField.Empty()
              ConfigurationBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__pipeline_versions"
(
    id                      TEXT    not null
        constraint pipeline_versions_pk
            primary key,
    pipeline_id             TEXT    not null
        constraint pipeline_versions_pipelines_id_fk
            references "cfg__pipelines",
    version                 integer not null,
    configuration_blob      BLOB    not null,
    configuration_blob_hash TEXT    not null,
    created_on              TEXT    not null,
    active                  integer not null,
    constraint pipeline_versions_uk_2
        unique (pipeline_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__pipeline_versions.`id`,
              cfg__pipeline_versions.`pipeline_id`,
              cfg__pipeline_versions.`version`,
              cfg__pipeline_versions.`configuration_blob`,
              cfg__pipeline_versions.`configuration_blob_hash`,
              cfg__pipeline_versions.`created_on`,
              cfg__pipeline_versions.`active`
        FROM cfg__pipeline_versions
        """
    
        static member TableName() = "cfg__pipeline_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg__pipelines`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type Pipeline =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("userGroupId")>] UserGroupId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              UserGroupId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__pipelines"
(
    id            text    not null
        constraint pipelines_pk
            primary key,
    user_group_id TEXT    not null
        constraint pipelines_user_groups_id_fk
            references "cfg__user_groups",
    name          text    not null,
    created_on    TEXT    not null,
    active        integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__pipelines.`id`,
              cfg__pipelines.`user_group_id`,
              cfg__pipelines.`name`,
              cfg__pipelines.`created_on`,
              cfg__pipelines.`active`
        FROM cfg__pipelines
        """
    
        static member TableName() = "cfg__pipelines"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Pipeline.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Pipeline.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Pipeline.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg__user_groups`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type UserGroup =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__user_groups"
(
    id         TEXT    not null
        constraint user_groups_pk
            primary key,
    name       text    not null,
    created_on integer not null,
    active     integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__user_groups.`id`,
              cfg__user_groups.`name`,
              cfg__user_groups.`created_on`,
              cfg__user_groups.`active`
        FROM cfg__user_groups
        """
    
        static member TableName() = "cfg__user_groups"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ UserGroup.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  UserGroup.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  UserGroup.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg__users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type User =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg__users"
(
    id   text not null
        constraint users_pk
            primary key,
    name TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg__users.`id`,
              cfg__users.`name`
        FROM cfg__users
        """
    
        static member TableName() = "cfg__users"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ User.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  User.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  User.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type Classification =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string option
          [<JsonPropertyName("parentClassification")>] ParentClassification: string option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Description = None
              ParentClassification = None
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE cfg_classifications
(
    id                    TEXT not null
        constraint cfg_classifications_pk
            primary key,
    name                  TEXT not null,
    description           text,
    parent_classification TEXT
        constraint cfg_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    created_on            TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg_classifications.`id`,
              cfg_classifications.`name`,
              cfg_classifications.`description`,
              cfg_classifications.`parent_classification`,
              cfg_classifications.`created_on`
        FROM cfg_classifications
        """
    
        static member TableName() = "cfg_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Classification.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Classification.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Classification.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg_file_types`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type FileType =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("extension")>] Extension: string
          [<JsonPropertyName("contentType")>] ContentType: string }
    
        static member Blank() =
            { Id = None
              Name = String.Empty
              Description = String.Empty
              Extension = String.Empty
              ContentType = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE cfg_file_types
(
    id           TEXT
        constraint cfg_file_types_pk
            primary key,
    name         TEXT not null,
    description  TEXT not null,
    extension    TEXT not null,
    content_type TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg_file_types.`id`,
              cfg_file_types.`name`,
              cfg_file_types.`description`,
              cfg_file_types.`extension`,
              cfg_file_types.`content_type`
        FROM cfg_file_types
        """
    
        static member TableName() = "cfg_file_types"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ FileType.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  FileType.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  FileType.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type MetadataItem =
        { [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE cfg_metadata
(
    item_key     TEXT not null
        constraint cfg_metadata_pk
            primary key,
    item_value   TEXT not null,
    last_updated TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg_metadata.`item_key`,
              cfg_metadata.`item_value`,
              cfg_metadata.`last_updated`
        FROM cfg_metadata
        """
    
        static member TableName() = "cfg_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ MetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  MetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  MetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `cfg_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type Tag =
        { [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "cfg_tags"
(
    tag TEXT not null
        constraint cfg_tag_pk
            primary key
)
        """
    
        static member SelectSql() = """
        SELECT
              cfg_tags.`tag`
        FROM cfg_tags
        """
    
        static member TableName() = "cfg_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Tag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Tag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Tag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_artifact_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunArtifactClassification =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("classificationId")>] ClassificationId: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ClassificationId = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_artifact_classifications"
(
    artifact_id       TEXT not null
        constraint core_pipeline_run_artifact_classifications_core__pipeline_run_artifacts_id_fk
            references core__pipeline_run_artifacts,
    classification_id TEXT not null
        constraint core_pipeline_run_artifact_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    last_updated      TEXT not null,
    constraint core_pipeline_run_artifact_classifications_pk
        primary key (artifact_id, artifact_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_artifact_classifications.`artifact_id`,
              core__pipeline_run_artifact_classifications.`classification_id`,
              core__pipeline_run_artifact_classifications.`last_updated`
        FROM core__pipeline_run_artifact_classifications
        """
    
        static member TableName() = "core__pipeline_run_artifact_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunArtifactClassification.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunArtifactClassification.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunArtifactClassification.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunArtifactMetadataItem =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_artifact_metadata
(
    artifact_id  TEXT not null
        constraint core__pipeline_run_artifact_metadata_core__pipeline_run_artifacts_id_fk
            references core__pipeline_run_artifacts,
    item_key     TEXT not null,
    item_value   TEXT not null,
    last_updated TEXT not null,
    constraint core__pipeline_run_artifact_metadata_pk
        primary key (artifact_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_artifact_metadata.`artifact_id`,
              core__pipeline_run_artifact_metadata.`item_key`,
              core__pipeline_run_artifact_metadata.`item_value`,
              core__pipeline_run_artifact_metadata.`last_updated`
        FROM core__pipeline_run_artifact_metadata
        """
    
        static member TableName() = "core__pipeline_run_artifact_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunArtifactMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunArtifactMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunArtifactMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_artifact_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunArtifactTag =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("tag")>] Tag: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              Tag = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_artifact_tags
(
    artifact_id  TEXT not null
        constraint core__pipeline_run_artifact_tags_store__artifacts_id_fk
            references store__artifacts,
    tag          TEXT not null
        constraint core__pipeline_run_artifact_tags_cfg_tags_tag_fk
            references cfg_tags,
    last_updated TEXT not null,
    constraint core__pipeline_run_artifact_tags_pk
        primary key (artifact_id, artifact_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_artifact_tags.`artifact_id`,
              core__pipeline_run_artifact_tags.`tag`,
              core__pipeline_run_artifact_tags.`last_updated`
        FROM core__pipeline_run_artifact_tags
        """
    
        static member TableName() = "core__pipeline_run_artifact_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunArtifactTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunArtifactTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunArtifactTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunArtifact =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("artifactBlob")>] ArtifactBlob: BlobField
          [<JsonPropertyName("artifactHash")>] ArtifactHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime option
          [<JsonPropertyName("fileType")>] FileType: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineRunId = String.Empty
              Name = String.Empty
              ArtifactBlob = BlobField.Empty()
              ArtifactHash = String.Empty
              CreatedOn = None
              FileType = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_artifacts"
(
    id              TEXT not null
        constraint core__pipeline_run_artifacts_pk
            primary key,
    pipeline_run_id TEXT not null
        constraint core__pipeline_run_artifacts_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    name            TEXT not null,
    artifact_blob   BLOB not null,
    artifact_hash   TEXT not null,
    created_on      TEXT,
    file_type       TEXT not null
        constraint core__pipeline_run_artifacts_cfg_file_types_id_fk
            references cfg_file_types
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_artifacts.`id`,
              core__pipeline_run_artifacts.`pipeline_run_id`,
              core__pipeline_run_artifacts.`name`,
              core__pipeline_run_artifacts.`artifact_blob`,
              core__pipeline_run_artifacts.`artifact_hash`,
              core__pipeline_run_artifacts.`created_on`,
              core__pipeline_run_artifacts.`file_type`
        FROM core__pipeline_run_artifacts
        """
    
        static member TableName() = "core__pipeline_run_artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunArtifact.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunArtifact.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunArtifact.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_data_store`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunDataStoreItem =
        { [<JsonPropertyName("piplineRunId")>] PiplineRunId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValueBlob")>] ItemValueBlob: BlobField
          [<JsonPropertyName("itemValueHash")>] ItemValueHash: int64
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PiplineRunId = String.Empty
              ItemKey = String.Empty
              ItemValueBlob = BlobField.Empty()
              ItemValueHash = 0L
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_data_store"
(
    pipline_run_id  TEXT    not null
        constraint core__pipeline_run_data_store_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    item_key        TEXT    not null,
    item_value_blob BLOB    not null,
    item_value_hash integer not null,
    last_updated    TEXT    not null,
    constraint core__pipeline_run_data_store_pk
        primary key (pipline_run_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_data_store.`pipline_run_id`,
              core__pipeline_run_data_store.`item_key`,
              core__pipeline_run_data_store.`item_value_blob`,
              core__pipeline_run_data_store.`item_value_hash`,
              core__pipeline_run_data_store.`last_updated`
        FROM core__pipeline_run_data_store
        """
    
        static member TableName() = "core__pipeline_run_data_store"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunDataStoreItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunDataStoreItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunDataStoreItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_key_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunKeyValue =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string option
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PipelineRunId = None
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_key_values"
(
    pipeline_run_id TEXT
        constraint pipeline_run_key_values_pipeline_runs_id_fk
            references "core__pipeline_runs",
    item_key        TEXT not null,
    item_value      text not null,
    last_updated    TEXT not null,
    constraint pipeline_run_key_values_pk
        primary key (pipeline_run_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_key_values.`pipeline_run_id`,
              core__pipeline_run_key_values.`item_key`,
              core__pipeline_run_key_values.`item_value`,
              core__pipeline_run_key_values.`last_updated`
        FROM core__pipeline_run_key_values
        """
    
        static member TableName() = "core__pipeline_run_key_values"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunKeyValue.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunKeyValue.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunKeyValue.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_logs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunLogItem =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: int64
          [<JsonPropertyName("itemDate")>] ItemDate: string
          [<JsonPropertyName("level")>] Level: string
          [<JsonPropertyName("scope")>] Scope: string
          [<JsonPropertyName("message")>] Message: string }
    
        static member Blank() =
            { PipelineRunId = 0L
              ItemDate = String.Empty
              Level = String.Empty
              Scope = String.Empty
              Message = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_logs"
(
    pipeline_run_id integer not null
        constraint pipeline_run_logs_pipeline_runs_id_fk
            references "core__pipeline_runs",
    item_date       text    not null,
    level           TEXT    not null,
    scope           TEXT    not null,
    message         TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_logs.`pipeline_run_id`,
              core__pipeline_run_logs.`item_date`,
              core__pipeline_run_logs.`level`,
              core__pipeline_run_logs.`scope`,
              core__pipeline_run_logs.`message`
        FROM core__pipeline_run_logs
        """
    
        static member TableName() = "core__pipeline_run_logs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunLogItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunLogItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunLogItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_paths`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunPath =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("path")>] Path: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PipelineRunId = String.Empty
              Id = String.Empty
              Path = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_paths
(
    pipeline_run_id text not null
        constraint core__pipeline_run_paths_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    id              TEXT not null,
    path            TEXT not null,
    last_updated    TEXT not null,
    constraint core__pipeline_run_paths_pk
        primary key (id, pipeline_run_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_paths.`pipeline_run_id`,
              core__pipeline_run_paths.`id`,
              core__pipeline_run_paths.`path`,
              core__pipeline_run_paths.`last_updated`
        FROM core__pipeline_run_paths
        """
    
        static member TableName() = "core__pipeline_run_paths"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunPath.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunPath.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunPath.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_resource_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunResourceClassification =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("classificationId")>] ClassificationId: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              ClassificationId = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_resource_classifications
(
    resource_id       TEXT not null
        constraint core_pipeline_run_resource_classifications_core__pipeline_run_resources_id_fk
            references core__pipeline_run_resources,
    classification_id TEXT not null
        constraint core_pipeline_run_resource_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    last_updated      TEXT not null,
    constraint core_pipeline_run_resource_classifications_pk
        primary key (resource_id, resource_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_resource_classifications.`resource_id`,
              core__pipeline_run_resource_classifications.`classification_id`,
              core__pipeline_run_resource_classifications.`last_updated`
        FROM core__pipeline_run_resource_classifications
        """
    
        static member TableName() = "core__pipeline_run_resource_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunResourceClassification.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunResourceClassification.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunResourceClassification.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_resource_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type CorePipelineRunResourceMetadata =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_resource_metadata
(
    resource_id  TEXT not null
        constraint core__pipeline_run_resource_metadata_core__pipeline_run_resources_id_fk
            references core__pipeline_run_resources,
    item_key     TEXT not null,
    item_value   TEXT not null,
    last_updated TEXT not null,
    constraint core__pipeline_run_resource_metadata_pk
        primary key (resource_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_resource_metadata.`resource_id`,
              core__pipeline_run_resource_metadata.`item_key`,
              core__pipeline_run_resource_metadata.`item_value`,
              core__pipeline_run_resource_metadata.`last_updated`
        FROM core__pipeline_run_resource_metadata
        """
    
        static member TableName() = "core__pipeline_run_resource_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ CorePipelineRunResourceMetadata.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  CorePipelineRunResourceMetadata.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  CorePipelineRunResourceMetadata.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_resource_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunResourceTag =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("tag")>] Tag: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              Tag = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_resource_tags
(
    resource_id  TEXT not null
        constraint core__pipeline_run_resource_tags_store__resources_id_fk
            references store__resources,
    tag          TEXT not null
        constraint core__pipeline_run_resource_tags_cfg_tags_tag_fk
            references cfg_tags,
    last_updated TEXT not null,
    constraint core__pipeline_run_resource_tags_pk
        primary key (resource_id, resource_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_resource_tags.`resource_id`,
              core__pipeline_run_resource_tags.`tag`,
              core__pipeline_run_resource_tags.`last_updated`
        FROM core__pipeline_run_resource_tags
        """
    
        static member TableName() = "core__pipeline_run_resource_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunResourceTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunResourceTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunResourceTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunResource =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("fileType")>] FileType: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineRunId = String.Empty
              Name = String.Empty
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              CreatedOn = DateTime.UtcNow
              FileType = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_run_resources"
(
    id              TEXT not null
        constraint core__pipeline_run_resources_pk
            primary key,
    pipeline_run_id TEXT not null
        constraint core__pipeline_run_resources_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    name            TEXT not null,
    resource_blob   blob not null,
    resource_hash   TEXT not null,
    created_on      TEXT not null,
    file_type       TEXT not null
        constraint core__pipeline_run_resources_cfg_file_types_id_fk
            references cfg_file_types
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_resources.`id`,
              core__pipeline_run_resources.`pipeline_run_id`,
              core__pipeline_run_resources.`name`,
              core__pipeline_run_resources.`resource_blob`,
              core__pipeline_run_resources.`resource_hash`,
              core__pipeline_run_resources.`created_on`,
              core__pipeline_run_resources.`file_type`
        FROM core__pipeline_run_resources
        """
    
        static member TableName() = "core__pipeline_run_resources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunResource.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunResource.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunResource.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunResult =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string option
          [<JsonPropertyName("result")>] Result: string option
          [<JsonPropertyName("startedOn")>] StartedOn: string option
          [<JsonPropertyName("completedOn")>] CompletedOn: string option
          [<JsonPropertyName("resultsBlob")>] ResultsBlob: string option }
    
        static member Blank() =
            { PipelineRunId = None
              Result = None
              StartedOn = None
              CompletedOn = None
              ResultsBlob = None }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_results
(
    pipeline_run_id TEXT
        constraint core__pipeline_run_results_pk
            primary key
        constraint core__pipeline_run_results_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    result          TEXT,
    started_on      TEXT,
    completed_on    TEXT,
    results_blob    TEXT
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_results.`pipeline_run_id`,
              core__pipeline_run_results.`result`,
              core__pipeline_run_results.`started_on`,
              core__pipeline_run_results.`completed_on`,
              core__pipeline_run_results.`results_blob`
        FROM core__pipeline_run_results
        """
    
        static member TableName() = "core__pipeline_run_results"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunResult.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunResult.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunResult.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_run_step_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRunStepResult =
        { [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("stepId")>] StepId: string
          [<JsonPropertyName("stepOrder")>] StepOrder: int
          [<JsonPropertyName("result")>] Result: string
          [<JsonPropertyName("message")>] Message: string
          [<JsonPropertyName("startedAt")>] StartedAt: string
          [<JsonPropertyName("completedAt")>] CompletedAt: int64 option
          [<JsonPropertyName("timeElapsed")>] TimeElapsed: int64
          [<JsonPropertyName("resultsBlob")>] ResultsBlob: BlobField }
    
        static member Blank() =
            { RunId = String.Empty
              StepId = String.Empty
              StepOrder = 0
              Result = String.Empty
              Message = String.Empty
              StartedAt = String.Empty
              CompletedAt = None
              TimeElapsed = 0L
              ResultsBlob = BlobField.Empty() }
    
        static member CreateTableSql() = """
        CREATE TABLE core__pipeline_run_step_results
(
    run_id       TEXT    not null
        constraint core__pipeline_run_step_results_core__pipeline_runs_id_fk
            references core__pipeline_runs,
    step_id      TEXT    not null
        constraint core__pipeline_run_step_results_cfg__pipeline_version_steps_id_fk
            references cfg__pipeline_version_steps,
    step_order   TEXT    not null,
    result       TEXT    not null,
    message      TEXT    not null,
    started_at   text    not null,
    completed_at integer,
    time_elapsed integer not null,
    results_blob BLOB    not null,
    constraint core__pipeline_run_step_results_pk
        primary key (run_id, step_id)
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_run_step_results.`run_id`,
              core__pipeline_run_step_results.`step_id`,
              core__pipeline_run_step_results.`step_order`,
              core__pipeline_run_step_results.`result`,
              core__pipeline_run_step_results.`message`,
              core__pipeline_run_step_results.`started_at`,
              core__pipeline_run_step_results.`completed_at`,
              core__pipeline_run_step_results.`time_elapsed`,
              core__pipeline_run_step_results.`results_blob`
        FROM core__pipeline_run_step_results
        """
    
        static member TableName() = "core__pipeline_run_step_results"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRunStepResult.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRunStepResult.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRunStepResult.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `core__pipeline_runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type PipelineRun =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineVersionId")>] PipelineVersionId: string
          [<JsonPropertyName("startedOn")>] StartedOn: string
          [<JsonPropertyName("startedBy")>] StartedBy: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineVersionId = String.Empty
              StartedOn = String.Empty
              StartedBy = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "core__pipeline_runs"
(
    id                  text not null
        constraint pipeline_runs_pk
            primary key,
    pipeline_version_id text not null
        constraint pipeline_runs_pipeline_versions_id_fk
            references "cfg__pipeline_versions",
    started_on          TEXT not null,
    started_by          TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              core__pipeline_runs.`id`,
              core__pipeline_runs.`pipeline_version_id`,
              core__pipeline_runs.`started_on`,
              core__pipeline_runs.`started_by`
        FROM core__pipeline_runs
        """
    
        static member TableName() = "core__pipeline_runs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ PipelineRun.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  PipelineRun.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  PipelineRun.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifact_version_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type ArtifactVersionClassification =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string option
          [<JsonPropertyName("classification")>] Classification: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = None
              Classification = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__artifact_version_classifications
(
    artifact_id    TEXT
        constraint store__artifact_version_classifications_store__artifact_versions_artifact_id_fk
            references store__artifact_versions (artifact_id),
    classification TEXT not null
        constraint store__artifact_version_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    last_updated   TEXT not null,
    constraint store__artifact_version_classifications_pk
        primary key (artifact_id, classification)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifact_version_classifications.`artifact_id`,
              store__artifact_version_classifications.`classification`,
              store__artifact_version_classifications.`last_updated`
        FROM store__artifact_version_classifications
        """
    
        static member TableName() = "store__artifact_version_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ArtifactVersionClassification.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ArtifactVersionClassification.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ArtifactVersionClassification.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifact_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type ArtifactVersionMetadataItem =
        { [<JsonPropertyName("artifactVersionId")>] ArtifactVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__artifact_version_metadata
(
    artifact_version_id TEXT not null
        constraint store__artifact_version_metadata_store__artifact_versions_created_on_fk
            references store__artifact_versions (artifact_id),
    item_key            TEXT not null,
    item_value          TEXT not null,
    last_updated        TEXT not null,
    constraint store__artifact_version_metadata_pk
        primary key (artifact_version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifact_version_metadata.`artifact_version_id`,
              store__artifact_version_metadata.`item_key`,
              store__artifact_version_metadata.`item_value`,
              store__artifact_version_metadata.`last_updated`
        FROM store__artifact_version_metadata
        """
    
        static member TableName() = "store__artifact_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ArtifactVersionMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ArtifactVersionMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ArtifactVersionMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifact_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type ArtifactVersionTag =
        { [<JsonPropertyName("artifactVersionId")>] ArtifactVersionId: string option
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ArtifactVersionId = None
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE store__artifact_version_tags
(
    artifact_version_id TEXT
        constraint store__artifact_version_tags_store__artifact_versions_id_fk
            references store__artifact_versions,
    tag                 TEXT not null
        constraint store__artifact_version_tags_cfg_tag_tag_fk
            references cfg_tags,
    constraint store__artifact_version_tags_pk
        primary key (artifact_version_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifact_version_tags.`artifact_version_id`,
              store__artifact_version_tags.`tag`
        FROM store__artifact_version_tags
        """
    
        static member TableName() = "store__artifact_version_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ArtifactVersionTag.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ArtifactVersionTag.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ArtifactVersionTag.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifact_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type ArtifactVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool
          [<JsonPropertyName("hidden")>] Hidden: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ArtifactId = String.Empty
              Version = 0
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true
              Hidden = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE "store__artifact_versions"
(
    id            TEXT    not null
        constraint store__artifact_versions_pk
            primary key,
    artifact_id   TEXT    not null
        constraint store__artifact_versions_store__artifact_id_fk
            references store__artifacts,
    version       integer not null,
    resource_blob BLOB    not null,
    resource_hash TEXT    not null,
    file_type     TEXT    not null
        constraint store__artifact_versions_cfg_file_types_id_fk
            references cfg_file_types,
    created_on    TEXT    not null,
    active        integer not null,
    hidden        integer not null,
    constraint store__resource_versions_uk
        unique (artifact_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifact_versions.`id`,
              store__artifact_versions.`artifact_id`,
              store__artifact_versions.`version`,
              store__artifact_versions.`resource_blob`,
              store__artifact_versions.`resource_hash`,
              store__artifact_versions.`file_type`,
              store__artifact_versions.`created_on`,
              store__artifact_versions.`active`,
              store__artifact_versions.`hidden`
        FROM store__artifact_versions
        """
    
        static member TableName() = "store__artifact_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ArtifactVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ArtifactVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ArtifactVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type Artifact =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__artifacts
(
    id         TEXT not null
        constraint store__artifacts_pk
            primary key,
    created_on TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              store__artifacts.`id`,
              store__artifacts.`created_on`
        FROM store__artifacts
        """
    
        static member TableName() = "store__artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Artifact.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Artifact.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Artifact.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__key_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type KeyValue =
        { [<JsonPropertyName("itemKey")>] ItemKey: string option
          [<JsonPropertyName("itemValue")>] ItemValue: string option
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ItemKey = None
              ItemValue = None
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__key_values
(
    item_key     TEXT
        constraint store__key_values_pk
            primary key,
    item_value   TEXT,
    last_updated TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              store__key_values.`item_key`,
              store__key_values.`item_value`,
              store__key_values.`last_updated`
        FROM store__key_values
        """
    
        static member TableName() = "store__key_values"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ KeyValue.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  KeyValue.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  KeyValue.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resource_version_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type ResourceVersionClassification =
        { [<JsonPropertyName("resourceId")>] ResourceId: string option
          [<JsonPropertyName("classification")>] Classification: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = None
              Classification = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__resource_version_classifications
(
    resource_id    TEXT
        constraint store__resource_version_classifications_store__resource_versions_resource_id_fk
            references store__resource_versions (resource_id),
    classification TEXT not null
        constraint store__resource_version_classifications_cfg_classifications_id_fk
            references cfg_classifications,
    last_updated   TEXT not null,
    constraint store__resource_version_classifications_pk
        primary key (resource_id, classification)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resource_version_classifications.`resource_id`,
              store__resource_version_classifications.`classification`,
              store__resource_version_classifications.`last_updated`
        FROM store__resource_version_classifications
        """
    
        static member TableName() = "store__resource_version_classifications"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ResourceVersionClassification.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ResourceVersionClassification.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ResourceVersionClassification.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resource_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type ResourceVersionMetadataItem =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "store__resource_version_metadata"
(
    resource_version_id TEXT not null
        constraint store__resource_version_metadata_store__resource_versions_id_fk
            references store__resource_versions,
    item_key            TEXT not null,
    item_value          TEXT not null,
    last_updated        TEXT not null,
    constraint store__resource_version_metadata_pk
        primary key (resource_version_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resource_version_metadata.`resource_version_id`,
              store__resource_version_metadata.`item_key`,
              store__resource_version_metadata.`item_value`,
              store__resource_version_metadata.`last_updated`
        FROM store__resource_version_metadata
        """
    
        static member TableName() = "store__resource_version_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ResourceVersionMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ResourceVersionMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ResourceVersionMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resource_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type Artifact =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string option
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ResourceVersionId = None
              Tag = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE store__resource_version_tags
(
    resource_version_id TEXT
        constraint store__resource_version_tags_store__resource_versions_id_fk
            references store__resource_versions,
    tag                 TEXT not null
        constraint store__resource_version_tags_cfg_tag_tag_fk
            references "cfg_tags",
    constraint store__resource_version_tags_pk
        primary key (resource_version_id, tag)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resource_version_tags.`resource_version_id`,
              store__resource_version_tags.`tag`
        FROM store__resource_version_tags
        """
    
        static member TableName() = "store__resource_version_tags"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Artifact.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Artifact.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Artifact.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resource_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type ResourceVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool
          [<JsonPropertyName("hidden")>] Hidden: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ResourceId = String.Empty
              Version = 0
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true
              Hidden = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE "store__resource_versions"
(
    id            TEXT    not null
        constraint store__resource_versions_pk
            primary key,
    resource_id   TEXT    not null
        constraint store__resource_versions_store__resources_id_fk
            references store__resources,
    version       integer not null,
    resource_blob BLOB    not null,
    resource_hash TEXT    not null,
    file_type     TEXT    not null
        constraint store__resource_versions_cfg_file_types_id_fk
            references cfg_file_types,
    created_on    TEXT    not null,
    active        integer not null,
    hidden        integer not null,
    constraint store__resource_versions_uk
        unique (resource_id, version)
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resource_versions.`id`,
              store__resource_versions.`resource_id`,
              store__resource_versions.`version`,
              store__resource_versions.`resource_blob`,
              store__resource_versions.`resource_hash`,
              store__resource_versions.`file_type`,
              store__resource_versions.`created_on`,
              store__resource_versions.`active`,
              store__resource_versions.`hidden`
        FROM store__resource_versions
        """
    
        static member TableName() = "store__resource_versions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ResourceVersion.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ResourceVersion.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ResourceVersion.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `store__resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type Resource =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE store__resources
(
    id         TEXT not null
        constraint store__resources_pk
            primary key,
    created_on TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              store__resources.`id`,
              store__resources.`created_on`
        FROM store__resources
        """
    
        static member TableName() = "store__resources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Resource.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Resource.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Resource.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
/// <remarks>
/// This record was generated via Freql.Tools on 06/07/2025 17:21:44
/// </remarks>
[<RequireQualifiedAccess>]
module Parameters =
    /// <summary>
    /// A record representing a new row in the table `cfg__pipeline_version_steps`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineVersionStep =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineVersionId")>] PipelineVersionId: string
          [<JsonPropertyName("stepOrder")>] StepOrder: int
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("stepConfigurationBlob")>] StepConfigurationBlob: BlobField
          [<JsonPropertyName("stepConfigurationHash")>] StepConfigurationHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              PipelineVersionId = String.Empty
              StepOrder = 0
              Name = String.Empty
              StepConfigurationBlob = BlobField.Empty()
              StepConfigurationHash = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `cfg__pipeline_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineId")>] PipelineId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("configurationBlob")>] ConfigurationBlob: BlobField
          [<JsonPropertyName("configurationBlobHash")>] ConfigurationBlobHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              PipelineId = String.Empty
              Version = 0
              ConfigurationBlob = BlobField.Empty()
              ConfigurationBlobHash = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `cfg__pipelines`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipeline =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("userGroupId")>] UserGroupId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              UserGroupId = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `cfg__user_groups`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewUserGroup =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true }
    
    /// <summary>
    /// A record representing a new row in the table `cfg__users`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewUser =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `cfg_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewClassification =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string option
          [<JsonPropertyName("parentClassification")>] ParentClassification: string option
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Description = None
              ParentClassification = None
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `cfg_file_types`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewFileType =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("extension")>] Extension: string
          [<JsonPropertyName("contentType")>] ContentType: string }
    
        static member Blank() =
            { Id = None
              Name = String.Empty
              Description = String.Empty
              Extension = String.Empty
              ContentType = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `cfg_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewMetadataItem =
        { [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `cfg_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewTag =
        { [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_artifact_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunArtifactClassification =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("classificationId")>] ClassificationId: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ClassificationId = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunArtifactMetadataItem =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_artifact_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunArtifactTag =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("tag")>] Tag: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = String.Empty
              Tag = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunArtifact =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("artifactBlob")>] ArtifactBlob: BlobField
          [<JsonPropertyName("artifactHash")>] ArtifactHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime option
          [<JsonPropertyName("fileType")>] FileType: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineRunId = String.Empty
              Name = String.Empty
              ArtifactBlob = BlobField.Empty()
              ArtifactHash = String.Empty
              CreatedOn = None
              FileType = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_data_store`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunDataStoreItem =
        { [<JsonPropertyName("piplineRunId")>] PiplineRunId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValueBlob")>] ItemValueBlob: BlobField
          [<JsonPropertyName("itemValueHash")>] ItemValueHash: int64
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PiplineRunId = String.Empty
              ItemKey = String.Empty
              ItemValueBlob = BlobField.Empty()
              ItemValueHash = 0L
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_key_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunKeyValue =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string option
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PipelineRunId = None
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_logs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunLogItem =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: int64
          [<JsonPropertyName("itemDate")>] ItemDate: string
          [<JsonPropertyName("level")>] Level: string
          [<JsonPropertyName("scope")>] Scope: string
          [<JsonPropertyName("message")>] Message: string }
    
        static member Blank() =
            { PipelineRunId = 0L
              ItemDate = String.Empty
              Level = String.Empty
              Scope = String.Empty
              Message = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_paths`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunPath =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("path")>] Path: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { PipelineRunId = String.Empty
              Id = String.Empty
              Path = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_resource_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunResourceClassification =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("classificationId")>] ClassificationId: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              ClassificationId = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_resource_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewCorePipelineRunResourceMetadata =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_resource_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunResourceTag =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("tag")>] Tag: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = String.Empty
              Tag = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunResource =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("fileType")>] FileType: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineRunId = String.Empty
              Name = String.Empty
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              CreatedOn = DateTime.UtcNow
              FileType = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunResult =
        { [<JsonPropertyName("pipelineRunId")>] PipelineRunId: string option
          [<JsonPropertyName("result")>] Result: string option
          [<JsonPropertyName("startedOn")>] StartedOn: string option
          [<JsonPropertyName("completedOn")>] CompletedOn: string option
          [<JsonPropertyName("resultsBlob")>] ResultsBlob: string option }
    
        static member Blank() =
            { PipelineRunId = None
              Result = None
              StartedOn = None
              CompletedOn = None
              ResultsBlob = None }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_run_step_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRunStepResult =
        { [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("stepId")>] StepId: string
          [<JsonPropertyName("stepOrder")>] StepOrder: int
          [<JsonPropertyName("result")>] Result: string
          [<JsonPropertyName("message")>] Message: string
          [<JsonPropertyName("startedAt")>] StartedAt: string
          [<JsonPropertyName("completedAt")>] CompletedAt: int64 option
          [<JsonPropertyName("timeElapsed")>] TimeElapsed: int64
          [<JsonPropertyName("resultsBlob")>] ResultsBlob: BlobField }
    
        static member Blank() =
            { RunId = String.Empty
              StepId = String.Empty
              StepOrder = 0
              Result = String.Empty
              Message = String.Empty
              StartedAt = String.Empty
              CompletedAt = None
              TimeElapsed = 0L
              ResultsBlob = BlobField.Empty() }
    
    /// <summary>
    /// A record representing a new row in the table `core__pipeline_runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewPipelineRun =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("pipelineVersionId")>] PipelineVersionId: string
          [<JsonPropertyName("startedOn")>] StartedOn: string
          [<JsonPropertyName("startedBy")>] StartedBy: string }
    
        static member Blank() =
            { Id = String.Empty
              PipelineVersionId = String.Empty
              StartedOn = String.Empty
              StartedBy = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifact_version_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewArtifactVersionClassification =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string option
          [<JsonPropertyName("classification")>] Classification: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactId = None
              Classification = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifact_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewArtifactVersionMetadataItem =
        { [<JsonPropertyName("artifactVersionId")>] ArtifactVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ArtifactVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifact_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewArtifactVersionTag =
        { [<JsonPropertyName("artifactVersionId")>] ArtifactVersionId: string option
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ArtifactVersionId = None
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifact_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewArtifactVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool
          [<JsonPropertyName("hidden")>] Hidden: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ArtifactId = String.Empty
              Version = 0
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true
              Hidden = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `store__artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewArtifact =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__key_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewKeyValue =
        { [<JsonPropertyName("itemKey")>] ItemKey: string option
          [<JsonPropertyName("itemValue")>] ItemValue: string option
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ItemKey = None
              ItemValue = None
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__resource_version_classifications`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewResourceVersionClassification =
        { [<JsonPropertyName("resourceId")>] ResourceId: string option
          [<JsonPropertyName("classification")>] Classification: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceId = None
              Classification = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__resource_version_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewResourceVersionMetadataItem =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string
          [<JsonPropertyName("lastUpdated")>] LastUpdated: DateTime }
    
        static member Blank() =
            { ResourceVersionId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty
              LastUpdated = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `store__resource_version_tags`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewArtifact =
        { [<JsonPropertyName("resourceVersionId")>] ResourceVersionId: string option
          [<JsonPropertyName("tag")>] Tag: string }
    
        static member Blank() =
            { ResourceVersionId = None
              Tag = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `store__resource_versions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewResourceVersion =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("version")>] Version: int
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("resourceHash")>] ResourceHash: string
          [<JsonPropertyName("fileType")>] FileType: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime
          [<JsonPropertyName("active")>] Active: bool
          [<JsonPropertyName("hidden")>] Hidden: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ResourceId = String.Empty
              Version = 0
              ResourceBlob = BlobField.Empty()
              ResourceHash = String.Empty
              FileType = String.Empty
              CreatedOn = DateTime.UtcNow
              Active = true
              Hidden = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `store__resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    type NewResource =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              CreatedOn = DateTime.UtcNow }
    
/// <remarks>
/// This record was generated via Freql.Tools on 06/07/2025 17:21:44
/// </remarks>
[<RequireQualifiedAccess>]
module Operations =

    let buildSql (lines: string list) = lines |> String.concat Environment.NewLine

    /// <summary>
    /// Select a `Records.PipelineVersionStep` from the table `cfg__pipeline_version_steps`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineVersionStep&gt;` and uses Records.PipelineVersionStep.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineVersionStepRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineVersionStepRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineVersionStep.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineVersionStep>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineVersionStep&gt;` and uses Records.PipelineVersionStep.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineVersionStepRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineVersionStepRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineVersionStep.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineVersionStep>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineVersionStep` from the table `cfg__pipeline_version_steps`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineVersionStep&gt;` and uses Records.PipelineVersionStep.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineVersionStepRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineVersionStepRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineVersionStep.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineVersionStep>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineVersionStep&gt;` and uses Records.PipelineVersionStep.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineVersionStepRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineVersionStepRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineVersionStep.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineVersionStep>(sql, parameters)
    
    let insertPipelineVersionStep (context: SqliteContext) (parameters: Parameters.NewPipelineVersionStep) =
        context.Insert("cfg__pipeline_version_steps", parameters)
    
    let tryInsertPipelineVersionStep (context: SqliteContext) (parameters: Parameters.NewPipelineVersionStep) =
        context.TryInsert("cfg__pipeline_version_steps", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineVersion` from the table `cfg__pipeline_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineVersion&gt;` and uses Records.PipelineVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineVersion&gt;` and uses Records.PipelineVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineVersion>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineVersion` from the table `cfg__pipeline_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineVersion&gt;` and uses Records.PipelineVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineVersion&gt;` and uses Records.PipelineVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineVersion>(sql, parameters)
    
    let insertPipelineVersion (context: SqliteContext) (parameters: Parameters.NewPipelineVersion) =
        context.Insert("cfg__pipeline_versions", parameters)
    
    let tryInsertPipelineVersion (context: SqliteContext) (parameters: Parameters.NewPipelineVersion) =
        context.TryInsert("cfg__pipeline_versions", parameters)
    
    /// <summary>
    /// Select a `Records.Pipeline` from the table `cfg__pipelines`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Pipeline&gt;` and uses Records.Pipeline.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Pipeline.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Pipeline>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Pipeline&gt;` and uses Records.Pipeline.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Pipeline.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Pipeline>(sql, parameters)
    /// <summary>
    /// Select a `Records.Pipeline` from the table `cfg__pipelines`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.Pipeline&gt;` and uses Records.Pipeline.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Pipeline.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.Pipeline>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.Pipeline&gt;` and uses Records.Pipeline.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Pipeline.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.Pipeline>(sql, parameters)
    
    let insertPipeline (context: SqliteContext) (parameters: Parameters.NewPipeline) =
        context.Insert("cfg__pipelines", parameters)
    
    let tryInsertPipeline (context: SqliteContext) (parameters: Parameters.NewPipeline) =
        context.TryInsert("cfg__pipelines", parameters)
    
    /// <summary>
    /// Select a `Records.UserGroup` from the table `cfg__user_groups`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.UserGroup&gt;` and uses Records.UserGroup.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUserGroupRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUserGroupRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.UserGroup.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.UserGroup>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.UserGroup&gt;` and uses Records.UserGroup.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUserGroupRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUserGroupRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.UserGroup.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.UserGroup>(sql, parameters)
    /// <summary>
    /// Select a `Records.UserGroup` from the table `cfg__user_groups`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.UserGroup&gt;` and uses Records.UserGroup.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectUserGroupRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectUserGroupRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.UserGroup.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.UserGroup>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.UserGroup&gt;` and uses Records.UserGroup.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectUserGroupRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectUserGroupRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.UserGroup.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.UserGroup>(sql, parameters)
    
    let insertUserGroup (context: SqliteContext) (parameters: Parameters.NewUserGroup) =
        context.Insert("cfg__user_groups", parameters)
    
    let tryInsertUserGroup (context: SqliteContext) (parameters: Parameters.NewUserGroup) =
        context.TryInsert("cfg__user_groups", parameters)
    
    /// <summary>
    /// Select a `Records.User` from the table `cfg__users`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.User&gt;` and uses Records.User.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUserRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUserRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.User.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.User>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.User&gt;` and uses Records.User.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUserRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUserRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.User.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.User>(sql, parameters)
    /// <summary>
    /// Select a `Records.User` from the table `cfg__users`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.User&gt;` and uses Records.User.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectUserRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectUserRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.User.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.User>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.User&gt;` and uses Records.User.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectUserRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectUserRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.User.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.User>(sql, parameters)
    
    let insertUser (context: SqliteContext) (parameters: Parameters.NewUser) =
        context.Insert("cfg__users", parameters)
    
    let tryInsertUser (context: SqliteContext) (parameters: Parameters.NewUser) =
        context.TryInsert("cfg__users", parameters)
    
    /// <summary>
    /// Select a `Records.Classification` from the table `cfg_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Classification&gt;` and uses Records.Classification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Classification.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Classification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Classification&gt;` and uses Records.Classification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Classification.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Classification>(sql, parameters)
    /// <summary>
    /// Select a `Records.Classification` from the table `cfg_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.Classification&gt;` and uses Records.Classification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Classification.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.Classification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.Classification&gt;` and uses Records.Classification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Classification.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.Classification>(sql, parameters)
    
    let insertClassification (context: SqliteContext) (parameters: Parameters.NewClassification) =
        context.Insert("cfg_classifications", parameters)
    
    let tryInsertClassification (context: SqliteContext) (parameters: Parameters.NewClassification) =
        context.TryInsert("cfg_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.FileType` from the table `cfg_file_types`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.FileType&gt;` and uses Records.FileType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectFileTypeRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectFileTypeRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.FileType.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.FileType>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.FileType&gt;` and uses Records.FileType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectFileTypeRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectFileTypeRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.FileType.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.FileType>(sql, parameters)
    /// <summary>
    /// Select a `Records.FileType` from the table `cfg_file_types`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.FileType&gt;` and uses Records.FileType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectFileTypeRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectFileTypeRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.FileType.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.FileType>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.FileType&gt;` and uses Records.FileType.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectFileTypeRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectFileTypeRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.FileType.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.FileType>(sql, parameters)
    
    let insertFileType (context: SqliteContext) (parameters: Parameters.NewFileType) =
        context.Insert("cfg_file_types", parameters)
    
    let tryInsertFileType (context: SqliteContext) (parameters: Parameters.NewFileType) =
        context.TryInsert("cfg_file_types", parameters)
    
    /// <summary>
    /// Select a `Records.MetadataItem` from the table `cfg_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.MetadataItem&gt;` and uses Records.MetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.MetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.MetadataItem&gt;` and uses Records.MetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.MetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.MetadataItem` from the table `cfg_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.MetadataItem&gt;` and uses Records.MetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.MetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.MetadataItem&gt;` and uses Records.MetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.MetadataItem>(sql, parameters)
    
    let insertMetadataItem (context: SqliteContext) (parameters: Parameters.NewMetadataItem) =
        context.Insert("cfg_metadata", parameters)
    
    let tryInsertMetadataItem (context: SqliteContext) (parameters: Parameters.NewMetadataItem) =
        context.TryInsert("cfg_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Tag` from the table `cfg_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Tag&gt;` and uses Records.Tag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Tag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Tag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Tag&gt;` and uses Records.Tag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Tag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Tag>(sql, parameters)
    /// <summary>
    /// Select a `Records.Tag` from the table `cfg_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.Tag&gt;` and uses Records.Tag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Tag.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.Tag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.Tag&gt;` and uses Records.Tag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Tag.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.Tag>(sql, parameters)
    
    let insertTag (context: SqliteContext) (parameters: Parameters.NewTag) =
        context.Insert("cfg_tags", parameters)
    
    let tryInsertTag (context: SqliteContext) (parameters: Parameters.NewTag) =
        context.TryInsert("cfg_tags", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunArtifactClassification` from the table `core__pipeline_run_artifact_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunArtifactClassification&gt;` and uses Records.PipelineRunArtifactClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunArtifactClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunArtifactClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactClassification.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunArtifactClassification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunArtifactClassification&gt;` and uses Records.PipelineRunArtifactClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunArtifactClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunArtifactClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactClassification.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunArtifactClassification>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunArtifactClassification` from the table `core__pipeline_run_artifact_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunArtifactClassification&gt;` and uses Records.PipelineRunArtifactClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunArtifactClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunArtifactClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactClassification.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunArtifactClassification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunArtifactClassification&gt;` and uses Records.PipelineRunArtifactClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunArtifactClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunArtifactClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactClassification.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunArtifactClassification>(sql, parameters)
    
    let insertPipelineRunArtifactClassification (context: SqliteContext) (parameters: Parameters.NewPipelineRunArtifactClassification) =
        context.Insert("core__pipeline_run_artifact_classifications", parameters)
    
    let tryInsertPipelineRunArtifactClassification (context: SqliteContext) (parameters: Parameters.NewPipelineRunArtifactClassification) =
        context.TryInsert("core__pipeline_run_artifact_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunArtifactMetadataItem` from the table `core__pipeline_run_artifact_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunArtifactMetadataItem&gt;` and uses Records.PipelineRunArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunArtifactMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunArtifactMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunArtifactMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunArtifactMetadataItem&gt;` and uses Records.PipelineRunArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunArtifactMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunArtifactMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunArtifactMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunArtifactMetadataItem` from the table `core__pipeline_run_artifact_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunArtifactMetadataItem&gt;` and uses Records.PipelineRunArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunArtifactMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunArtifactMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunArtifactMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunArtifactMetadataItem&gt;` and uses Records.PipelineRunArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunArtifactMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunArtifactMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunArtifactMetadataItem>(sql, parameters)
    
    let insertPipelineRunArtifactMetadataItem (context: SqliteContext) (parameters: Parameters.NewPipelineRunArtifactMetadataItem) =
        context.Insert("core__pipeline_run_artifact_metadata", parameters)
    
    let tryInsertPipelineRunArtifactMetadataItem (context: SqliteContext) (parameters: Parameters.NewPipelineRunArtifactMetadataItem) =
        context.TryInsert("core__pipeline_run_artifact_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunArtifactTag` from the table `core__pipeline_run_artifact_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunArtifactTag&gt;` and uses Records.PipelineRunArtifactTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunArtifactTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunArtifactTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunArtifactTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunArtifactTag&gt;` and uses Records.PipelineRunArtifactTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunArtifactTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunArtifactTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunArtifactTag>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunArtifactTag` from the table `core__pipeline_run_artifact_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunArtifactTag&gt;` and uses Records.PipelineRunArtifactTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunArtifactTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunArtifactTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactTag.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunArtifactTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunArtifactTag&gt;` and uses Records.PipelineRunArtifactTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunArtifactTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunArtifactTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifactTag.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunArtifactTag>(sql, parameters)
    
    let insertPipelineRunArtifactTag (context: SqliteContext) (parameters: Parameters.NewPipelineRunArtifactTag) =
        context.Insert("core__pipeline_run_artifact_tags", parameters)
    
    let tryInsertPipelineRunArtifactTag (context: SqliteContext) (parameters: Parameters.NewPipelineRunArtifactTag) =
        context.TryInsert("core__pipeline_run_artifact_tags", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunArtifact` from the table `core__pipeline_run_artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunArtifact&gt;` and uses Records.PipelineRunArtifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifact.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunArtifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunArtifact&gt;` and uses Records.PipelineRunArtifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifact.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunArtifact>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunArtifact` from the table `core__pipeline_run_artifacts`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunArtifact&gt;` and uses Records.PipelineRunArtifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifact.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunArtifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunArtifact&gt;` and uses Records.PipelineRunArtifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunArtifact.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunArtifact>(sql, parameters)
    
    let insertPipelineRunArtifact (context: SqliteContext) (parameters: Parameters.NewPipelineRunArtifact) =
        context.Insert("core__pipeline_run_artifacts", parameters)
    
    let tryInsertPipelineRunArtifact (context: SqliteContext) (parameters: Parameters.NewPipelineRunArtifact) =
        context.TryInsert("core__pipeline_run_artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunDataStoreItem` from the table `core__pipeline_run_data_store`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunDataStoreItem&gt;` and uses Records.PipelineRunDataStoreItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunDataStoreItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunDataStoreItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunDataStoreItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunDataStoreItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunDataStoreItem&gt;` and uses Records.PipelineRunDataStoreItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunDataStoreItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunDataStoreItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunDataStoreItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunDataStoreItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunDataStoreItem` from the table `core__pipeline_run_data_store`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunDataStoreItem&gt;` and uses Records.PipelineRunDataStoreItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunDataStoreItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunDataStoreItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunDataStoreItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunDataStoreItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunDataStoreItem&gt;` and uses Records.PipelineRunDataStoreItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunDataStoreItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunDataStoreItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunDataStoreItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunDataStoreItem>(sql, parameters)
    
    let insertPipelineRunDataStoreItem (context: SqliteContext) (parameters: Parameters.NewPipelineRunDataStoreItem) =
        context.Insert("core__pipeline_run_data_store", parameters)
    
    let tryInsertPipelineRunDataStoreItem (context: SqliteContext) (parameters: Parameters.NewPipelineRunDataStoreItem) =
        context.TryInsert("core__pipeline_run_data_store", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunKeyValue` from the table `core__pipeline_run_key_values`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunKeyValue&gt;` and uses Records.PipelineRunKeyValue.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunKeyValueRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunKeyValueRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunKeyValue.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunKeyValue>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunKeyValue&gt;` and uses Records.PipelineRunKeyValue.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunKeyValueRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunKeyValueRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunKeyValue.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunKeyValue>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunKeyValue` from the table `core__pipeline_run_key_values`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunKeyValue&gt;` and uses Records.PipelineRunKeyValue.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunKeyValueRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunKeyValueRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunKeyValue.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunKeyValue>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunKeyValue&gt;` and uses Records.PipelineRunKeyValue.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunKeyValueRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunKeyValueRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunKeyValue.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunKeyValue>(sql, parameters)
    
    let insertPipelineRunKeyValue (context: SqliteContext) (parameters: Parameters.NewPipelineRunKeyValue) =
        context.Insert("core__pipeline_run_key_values", parameters)
    
    let tryInsertPipelineRunKeyValue (context: SqliteContext) (parameters: Parameters.NewPipelineRunKeyValue) =
        context.TryInsert("core__pipeline_run_key_values", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunLogItem` from the table `core__pipeline_run_logs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunLogItem&gt;` and uses Records.PipelineRunLogItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunLogItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunLogItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunLogItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunLogItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunLogItem&gt;` and uses Records.PipelineRunLogItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunLogItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunLogItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunLogItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunLogItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunLogItem` from the table `core__pipeline_run_logs`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunLogItem&gt;` and uses Records.PipelineRunLogItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunLogItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunLogItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunLogItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunLogItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunLogItem&gt;` and uses Records.PipelineRunLogItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunLogItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunLogItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunLogItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunLogItem>(sql, parameters)
    
    let insertPipelineRunLogItem (context: SqliteContext) (parameters: Parameters.NewPipelineRunLogItem) =
        context.Insert("core__pipeline_run_logs", parameters)
    
    let tryInsertPipelineRunLogItem (context: SqliteContext) (parameters: Parameters.NewPipelineRunLogItem) =
        context.TryInsert("core__pipeline_run_logs", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunPath` from the table `core__pipeline_run_paths`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunPath&gt;` and uses Records.PipelineRunPath.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunPathRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunPathRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunPath.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunPath>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunPath&gt;` and uses Records.PipelineRunPath.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunPathRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunPathRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunPath.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunPath>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunPath` from the table `core__pipeline_run_paths`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunPath&gt;` and uses Records.PipelineRunPath.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunPathRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunPathRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunPath.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunPath>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunPath&gt;` and uses Records.PipelineRunPath.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunPathRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunPathRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunPath.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunPath>(sql, parameters)
    
    let insertPipelineRunPath (context: SqliteContext) (parameters: Parameters.NewPipelineRunPath) =
        context.Insert("core__pipeline_run_paths", parameters)
    
    let tryInsertPipelineRunPath (context: SqliteContext) (parameters: Parameters.NewPipelineRunPath) =
        context.TryInsert("core__pipeline_run_paths", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunResourceClassification` from the table `core__pipeline_run_resource_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunResourceClassification&gt;` and uses Records.PipelineRunResourceClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunResourceClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunResourceClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResourceClassification.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunResourceClassification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunResourceClassification&gt;` and uses Records.PipelineRunResourceClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunResourceClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunResourceClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResourceClassification.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunResourceClassification>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunResourceClassification` from the table `core__pipeline_run_resource_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunResourceClassification&gt;` and uses Records.PipelineRunResourceClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunResourceClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunResourceClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResourceClassification.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunResourceClassification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunResourceClassification&gt;` and uses Records.PipelineRunResourceClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunResourceClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunResourceClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResourceClassification.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunResourceClassification>(sql, parameters)
    
    let insertPipelineRunResourceClassification (context: SqliteContext) (parameters: Parameters.NewPipelineRunResourceClassification) =
        context.Insert("core__pipeline_run_resource_classifications", parameters)
    
    let tryInsertPipelineRunResourceClassification (context: SqliteContext) (parameters: Parameters.NewPipelineRunResourceClassification) =
        context.TryInsert("core__pipeline_run_resource_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.CorePipelineRunResourceMetadata` from the table `core__pipeline_run_resource_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.CorePipelineRunResourceMetadata&gt;` and uses Records.CorePipelineRunResourceMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourceMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourceMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceMetadata.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.CorePipelineRunResourceMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.CorePipelineRunResourceMetadata&gt;` and uses Records.CorePipelineRunResourceMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectCorePipelineRunResourceMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectCorePipelineRunResourceMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceMetadata.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.CorePipelineRunResourceMetadata>(sql, parameters)
    /// <summary>
    /// Select a `Records.CorePipelineRunResourceMetadata` from the table `core__pipeline_run_resource_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.CorePipelineRunResourceMetadata&gt;` and uses Records.CorePipelineRunResourceMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourceMetadataRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourceMetadataRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.CorePipelineRunResourceMetadata>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.CorePipelineRunResourceMetadata&gt;` and uses Records.CorePipelineRunResourceMetadata.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectCorePipelineRunResourceMetadataRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectCorePipelineRunResourceMetadataRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.CorePipelineRunResourceMetadata.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.CorePipelineRunResourceMetadata>(sql, parameters)
    
    let insertCorePipelineRunResourceMetadata (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResourceMetadata) =
        context.Insert("core__pipeline_run_resource_metadata", parameters)
    
    let tryInsertCorePipelineRunResourceMetadata (context: SqliteContext) (parameters: Parameters.NewCorePipelineRunResourceMetadata) =
        context.TryInsert("core__pipeline_run_resource_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunResourceTag` from the table `core__pipeline_run_resource_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunResourceTag&gt;` and uses Records.PipelineRunResourceTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunResourceTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunResourceTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResourceTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunResourceTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunResourceTag&gt;` and uses Records.PipelineRunResourceTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunResourceTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunResourceTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResourceTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunResourceTag>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunResourceTag` from the table `core__pipeline_run_resource_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunResourceTag&gt;` and uses Records.PipelineRunResourceTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunResourceTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunResourceTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResourceTag.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunResourceTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunResourceTag&gt;` and uses Records.PipelineRunResourceTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunResourceTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunResourceTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResourceTag.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunResourceTag>(sql, parameters)
    
    let insertPipelineRunResourceTag (context: SqliteContext) (parameters: Parameters.NewPipelineRunResourceTag) =
        context.Insert("core__pipeline_run_resource_tags", parameters)
    
    let tryInsertPipelineRunResourceTag (context: SqliteContext) (parameters: Parameters.NewPipelineRunResourceTag) =
        context.TryInsert("core__pipeline_run_resource_tags", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunResource` from the table `core__pipeline_run_resources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunResource&gt;` and uses Records.PipelineRunResource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunResourceRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunResourceRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResource.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunResource>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunResource&gt;` and uses Records.PipelineRunResource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunResourceRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunResourceRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResource.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunResource>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunResource` from the table `core__pipeline_run_resources`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunResource&gt;` and uses Records.PipelineRunResource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunResourceRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunResourceRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResource.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunResource>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunResource&gt;` and uses Records.PipelineRunResource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunResourceRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunResourceRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResource.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunResource>(sql, parameters)
    
    let insertPipelineRunResource (context: SqliteContext) (parameters: Parameters.NewPipelineRunResource) =
        context.Insert("core__pipeline_run_resources", parameters)
    
    let tryInsertPipelineRunResource (context: SqliteContext) (parameters: Parameters.NewPipelineRunResource) =
        context.TryInsert("core__pipeline_run_resources", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunResult` from the table `core__pipeline_run_results`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunResult&gt;` and uses Records.PipelineRunResult.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunResultRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunResultRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResult.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunResult>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunResult&gt;` and uses Records.PipelineRunResult.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunResultRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunResultRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResult.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunResult>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunResult` from the table `core__pipeline_run_results`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunResult&gt;` and uses Records.PipelineRunResult.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunResultRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunResultRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResult.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunResult>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunResult&gt;` and uses Records.PipelineRunResult.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunResultRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunResultRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunResult.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunResult>(sql, parameters)
    
    let insertPipelineRunResult (context: SqliteContext) (parameters: Parameters.NewPipelineRunResult) =
        context.Insert("core__pipeline_run_results", parameters)
    
    let tryInsertPipelineRunResult (context: SqliteContext) (parameters: Parameters.NewPipelineRunResult) =
        context.TryInsert("core__pipeline_run_results", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRunStepResult` from the table `core__pipeline_run_step_results`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRunStepResult&gt;` and uses Records.PipelineRunStepResult.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunStepResultRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunStepResultRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunStepResult.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRunStepResult>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRunStepResult&gt;` and uses Records.PipelineRunStepResult.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunStepResultRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunStepResultRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunStepResult.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRunStepResult>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRunStepResult` from the table `core__pipeline_run_step_results`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRunStepResult&gt;` and uses Records.PipelineRunStepResult.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunStepResultRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunStepResultRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunStepResult.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRunStepResult>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRunStepResult&gt;` and uses Records.PipelineRunStepResult.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunStepResultRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunStepResultRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRunStepResult.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRunStepResult>(sql, parameters)
    
    let insertPipelineRunStepResult (context: SqliteContext) (parameters: Parameters.NewPipelineRunStepResult) =
        context.Insert("core__pipeline_run_step_results", parameters)
    
    let tryInsertPipelineRunStepResult (context: SqliteContext) (parameters: Parameters.NewPipelineRunStepResult) =
        context.TryInsert("core__pipeline_run_step_results", parameters)
    
    /// <summary>
    /// Select a `Records.PipelineRun` from the table `core__pipeline_runs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.PipelineRun&gt;` and uses Records.PipelineRun.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRun.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.PipelineRun>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.PipelineRun&gt;` and uses Records.PipelineRun.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectPipelineRunRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectPipelineRunRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRun.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.PipelineRun>(sql, parameters)
    /// <summary>
    /// Select a `Records.PipelineRun` from the table `core__pipeline_runs`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.PipelineRun&gt;` and uses Records.PipelineRun.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRun.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.PipelineRun>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.PipelineRun&gt;` and uses Records.PipelineRun.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectPipelineRunRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectPipelineRunRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.PipelineRun.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.PipelineRun>(sql, parameters)
    
    let insertPipelineRun (context: SqliteContext) (parameters: Parameters.NewPipelineRun) =
        context.Insert("core__pipeline_runs", parameters)
    
    let tryInsertPipelineRun (context: SqliteContext) (parameters: Parameters.NewPipelineRun) =
        context.TryInsert("core__pipeline_runs", parameters)
    
    /// <summary>
    /// Select a `Records.ArtifactVersionClassification` from the table `store__artifact_version_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ArtifactVersionClassification&gt;` and uses Records.ArtifactVersionClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactVersionClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactVersionClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionClassification.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ArtifactVersionClassification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ArtifactVersionClassification&gt;` and uses Records.ArtifactVersionClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactVersionClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactVersionClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionClassification.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ArtifactVersionClassification>(sql, parameters)
    /// <summary>
    /// Select a `Records.ArtifactVersionClassification` from the table `store__artifact_version_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ArtifactVersionClassification&gt;` and uses Records.ArtifactVersionClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactVersionClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactVersionClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionClassification.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ArtifactVersionClassification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ArtifactVersionClassification&gt;` and uses Records.ArtifactVersionClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactVersionClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactVersionClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionClassification.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ArtifactVersionClassification>(sql, parameters)
    
    let insertArtifactVersionClassification (context: SqliteContext) (parameters: Parameters.NewArtifactVersionClassification) =
        context.Insert("store__artifact_version_classifications", parameters)
    
    let tryInsertArtifactVersionClassification (context: SqliteContext) (parameters: Parameters.NewArtifactVersionClassification) =
        context.TryInsert("store__artifact_version_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.ArtifactVersionMetadataItem` from the table `store__artifact_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ArtifactVersionMetadataItem&gt;` and uses Records.ArtifactVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ArtifactVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ArtifactVersionMetadataItem&gt;` and uses Records.ArtifactVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ArtifactVersionMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ArtifactVersionMetadataItem` from the table `store__artifact_version_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ArtifactVersionMetadataItem&gt;` and uses Records.ArtifactVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ArtifactVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ArtifactVersionMetadataItem&gt;` and uses Records.ArtifactVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ArtifactVersionMetadataItem>(sql, parameters)
    
    let insertArtifactVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewArtifactVersionMetadataItem) =
        context.Insert("store__artifact_version_metadata", parameters)
    
    let tryInsertArtifactVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewArtifactVersionMetadataItem) =
        context.TryInsert("store__artifact_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.ArtifactVersionTag` from the table `store__artifact_version_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ArtifactVersionTag&gt;` and uses Records.ArtifactVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactVersionTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactVersionTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionTag.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ArtifactVersionTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ArtifactVersionTag&gt;` and uses Records.ArtifactVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactVersionTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactVersionTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionTag.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ArtifactVersionTag>(sql, parameters)
    /// <summary>
    /// Select a `Records.ArtifactVersionTag` from the table `store__artifact_version_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ArtifactVersionTag&gt;` and uses Records.ArtifactVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactVersionTagRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactVersionTagRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionTag.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ArtifactVersionTag>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ArtifactVersionTag&gt;` and uses Records.ArtifactVersionTag.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactVersionTagRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactVersionTagRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersionTag.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ArtifactVersionTag>(sql, parameters)
    
    let insertArtifactVersionTag (context: SqliteContext) (parameters: Parameters.NewArtifactVersionTag) =
        context.Insert("store__artifact_version_tags", parameters)
    
    let tryInsertArtifactVersionTag (context: SqliteContext) (parameters: Parameters.NewArtifactVersionTag) =
        context.TryInsert("store__artifact_version_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ArtifactVersion` from the table `store__artifact_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ArtifactVersion&gt;` and uses Records.ArtifactVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ArtifactVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ArtifactVersion&gt;` and uses Records.ArtifactVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ArtifactVersion>(sql, parameters)
    /// <summary>
    /// Select a `Records.ArtifactVersion` from the table `store__artifact_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ArtifactVersion&gt;` and uses Records.ArtifactVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ArtifactVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ArtifactVersion&gt;` and uses Records.ArtifactVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ArtifactVersion>(sql, parameters)
    
    let insertArtifactVersion (context: SqliteContext) (parameters: Parameters.NewArtifactVersion) =
        context.Insert("store__artifact_versions", parameters)
    
    let tryInsertArtifactVersion (context: SqliteContext) (parameters: Parameters.NewArtifactVersion) =
        context.TryInsert("store__artifact_versions", parameters)
    
    /// <summary>
    /// Select a `Records.Artifact` from the table `store__artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Artifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Artifact>(sql, parameters)
    /// <summary>
    /// Select a `Records.Artifact` from the table `store__artifacts`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.Artifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.Artifact>(sql, parameters)
    
    let insertArtifact (context: SqliteContext) (parameters: Parameters.NewArtifact) =
        context.Insert("store__artifacts", parameters)
    
    let tryInsertArtifact (context: SqliteContext) (parameters: Parameters.NewArtifact) =
        context.TryInsert("store__artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.KeyValue` from the table `store__key_values`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.KeyValue&gt;` and uses Records.KeyValue.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectKeyValueRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectKeyValueRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.KeyValue.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.KeyValue>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.KeyValue&gt;` and uses Records.KeyValue.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectKeyValueRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectKeyValueRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.KeyValue.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.KeyValue>(sql, parameters)
    /// <summary>
    /// Select a `Records.KeyValue` from the table `store__key_values`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.KeyValue&gt;` and uses Records.KeyValue.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectKeyValueRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectKeyValueRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.KeyValue.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.KeyValue>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.KeyValue&gt;` and uses Records.KeyValue.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectKeyValueRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectKeyValueRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.KeyValue.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.KeyValue>(sql, parameters)
    
    let insertKeyValue (context: SqliteContext) (parameters: Parameters.NewKeyValue) =
        context.Insert("store__key_values", parameters)
    
    let tryInsertKeyValue (context: SqliteContext) (parameters: Parameters.NewKeyValue) =
        context.TryInsert("store__key_values", parameters)
    
    /// <summary>
    /// Select a `Records.ResourceVersionClassification` from the table `store__resource_version_classifications`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ResourceVersionClassification&gt;` and uses Records.ResourceVersionClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionClassification.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ResourceVersionClassification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ResourceVersionClassification&gt;` and uses Records.ResourceVersionClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionClassification.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ResourceVersionClassification>(sql, parameters)
    /// <summary>
    /// Select a `Records.ResourceVersionClassification` from the table `store__resource_version_classifications`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ResourceVersionClassification&gt;` and uses Records.ResourceVersionClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionClassificationRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionClassificationRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionClassification.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ResourceVersionClassification>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ResourceVersionClassification&gt;` and uses Records.ResourceVersionClassification.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionClassificationRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionClassificationRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionClassification.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ResourceVersionClassification>(sql, parameters)
    
    let insertResourceVersionClassification (context: SqliteContext) (parameters: Parameters.NewResourceVersionClassification) =
        context.Insert("store__resource_version_classifications", parameters)
    
    let tryInsertResourceVersionClassification (context: SqliteContext) (parameters: Parameters.NewResourceVersionClassification) =
        context.TryInsert("store__resource_version_classifications", parameters)
    
    /// <summary>
    /// Select a `Records.ResourceVersionMetadataItem` from the table `store__resource_version_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ResourceVersionMetadataItem&gt;` and uses Records.ResourceVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ResourceVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ResourceVersionMetadataItem&gt;` and uses Records.ResourceVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ResourceVersionMetadataItem>(sql, parameters)
    /// <summary>
    /// Select a `Records.ResourceVersionMetadataItem` from the table `store__resource_version_metadata`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ResourceVersionMetadataItem&gt;` and uses Records.ResourceVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ResourceVersionMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ResourceVersionMetadataItem&gt;` and uses Records.ResourceVersionMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersionMetadataItem.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ResourceVersionMetadataItem>(sql, parameters)
    
    let insertResourceVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewResourceVersionMetadataItem) =
        context.Insert("store__resource_version_metadata", parameters)
    
    let tryInsertResourceVersionMetadataItem (context: SqliteContext) (parameters: Parameters.NewResourceVersionMetadataItem) =
        context.TryInsert("store__resource_version_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Artifact` from the table `store__resource_version_tags`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Artifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Artifact>(sql, parameters)
    /// <summary>
    /// Select a `Records.Artifact` from the table `store__resource_version_tags`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.Artifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.Artifact>(sql, parameters)
    
    let insertArtifact (context: SqliteContext) (parameters: Parameters.NewArtifact) =
        context.Insert("store__resource_version_tags", parameters)
    
    let tryInsertArtifact (context: SqliteContext) (parameters: Parameters.NewArtifact) =
        context.TryInsert("store__resource_version_tags", parameters)
    
    /// <summary>
    /// Select a `Records.ResourceVersion` from the table `store__resource_versions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ResourceVersion&gt;` and uses Records.ResourceVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersion.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ResourceVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ResourceVersion&gt;` and uses Records.ResourceVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersion.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ResourceVersion>(sql, parameters)
    /// <summary>
    /// Select a `Records.ResourceVersion` from the table `store__resource_versions`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.ResourceVersion&gt;` and uses Records.ResourceVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.ResourceVersion>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.ResourceVersion&gt;` and uses Records.ResourceVersion.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceVersionRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceVersionRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceVersion.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.ResourceVersion>(sql, parameters)
    
    let insertResourceVersion (context: SqliteContext) (parameters: Parameters.NewResourceVersion) =
        context.Insert("store__resource_versions", parameters)
    
    let tryInsertResourceVersion (context: SqliteContext) (parameters: Parameters.NewResourceVersion) =
        context.TryInsert("store__resource_versions", parameters)
    
    /// <summary>
    /// Select a `Records.Resource` from the table `store__resources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Resource&gt;` and uses Records.Resource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Resource.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Resource>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Resource&gt;` and uses Records.Resource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Resource.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Resource>(sql, parameters)
    /// <summary>
    /// Select a `Records.Resource` from the table `store__resources`.
    /// Internally this calls `context.TrySelectSingleAnon&lt;Records.Resource&gt;` and uses Records.Resource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Resource.SelectSql() ] @ query |> buildSql
        context.TrySelectSingleAnon<Records.Resource>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.TrySelectAnon&lt;Records.Resource&gt;` and uses Records.Resource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 06/07/2025 17:21:44
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = trySelectResourceRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let trySelectResourceRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Resource.SelectSql() ] @ query |> buildSql
        context.TrySelectAnon<Records.Resource>(sql, parameters)
    
    let insertResource (context: SqliteContext) (parameters: Parameters.NewResource) =
        context.Insert("store__resources", parameters)
    
    let tryInsertResource (context: SqliteContext) (parameters: Parameters.NewResource) =
        context.TryInsert("store__resources", parameters)
    
[<RequireQualifiedAccess>]
module Initialization =
    let sql (checkIfExists: bool) =
        [ Records.UserGroup.InitializationSql checkIfExists
          Records.Pipeline.InitializationSql checkIfExists
          Records.PipelineVersion.InitializationSql checkIfExists
          Records.Resource.InitializationSql checkIfExists
          Records.FileType.InitializationSql checkIfExists
          Records.Artifact.InitializationSql checkIfExists
          Records.PipelineRun.InitializationSql checkIfExists
          Records.ResourceVersion.InitializationSql checkIfExists
          Records.Tag.InitializationSql checkIfExists
          Records.ArtifactVersion.InitializationSql checkIfExists
          Records.PipelineVersionStep.InitializationSql checkIfExists
          Records.PipelineRunResource.InitializationSql checkIfExists
          Records.PipelineRunArtifact.InitializationSql checkIfExists
          Records.Artifact.InitializationSql checkIfExists
          Records.ResourceVersionMetadataItem.InitializationSql checkIfExists
          Records.ResourceVersionClassification.InitializationSql checkIfExists
          Records.KeyValue.InitializationSql checkIfExists
          Records.ArtifactVersionTag.InitializationSql checkIfExists
          Records.ArtifactVersionMetadataItem.InitializationSql checkIfExists
          Records.ArtifactVersionClassification.InitializationSql checkIfExists
          Records.PipelineRunStepResult.InitializationSql checkIfExists
          Records.PipelineRunResult.InitializationSql checkIfExists
          Records.PipelineRunResourceTag.InitializationSql checkIfExists
          Records.CorePipelineRunResourceMetadata.InitializationSql checkIfExists
          Records.PipelineRunResourceClassification.InitializationSql checkIfExists
          Records.PipelineRunPath.InitializationSql checkIfExists
          Records.PipelineRunLogItem.InitializationSql checkIfExists
          Records.PipelineRunKeyValue.InitializationSql checkIfExists
          Records.PipelineRunDataStoreItem.InitializationSql checkIfExists
          Records.PipelineRunArtifactTag.InitializationSql checkIfExists
          Records.PipelineRunArtifactMetadataItem.InitializationSql checkIfExists
          Records.PipelineRunArtifactClassification.InitializationSql checkIfExists
          Records.MetadataItem.InitializationSql checkIfExists
          Records.User.InitializationSql checkIfExists ]
        |> List.concat

    let run (checkIfExists: bool) (ctx: SqliteContext) =
        sql checkIfExists |> List.iter (ctx.ExecuteSqlNonQuery >> ignore)

    let runInTransaction (checkIfExists: bool) (ctx: SqliteContext) =
        ctx.ExecuteInTransaction(fun t -> sql checkIfExists |> List.iter (t.ExecuteSqlNonQuery >> ignore))
